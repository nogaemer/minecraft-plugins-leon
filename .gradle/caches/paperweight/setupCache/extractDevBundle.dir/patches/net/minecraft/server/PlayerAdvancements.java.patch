--- a/net/minecraft/server/PlayerAdvancements.java
+++ b/net/minecraft/server/PlayerAdvancements.java
@@ -11,17 +11,19 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.JsonOps;
+import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.Writer;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.FileUtil;
 import net.minecraft.SharedConstants;
@@ -44,6 +46,7 @@
 import org.slf4j.Logger;
 
 public class PlayerAdvancements {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final Gson GSON = (new GsonBuilder()).registerTypeAdapter(AdvancementProgress.class, new AdvancementProgress.Serializer()).registerTypeAdapter(ResourceLocation.class, new ResourceLocation.Serializer()).setPrettyPrinting().create();
     private static final TypeToken<Map<ResourceLocation, AdvancementProgress>> TYPE_TOKEN = new TypeToken<Map<ResourceLocation, AdvancementProgress>>() {
@@ -51,14 +54,15 @@
     private final DataFixer dataFixer;
     private final PlayerList playerList;
     private final Path playerSavePath;
-    private final Map<Advancement, AdvancementProgress> progress = new LinkedHashMap<>();
-    private final Set<Advancement> visible = new HashSet<>();
-    private final Set<Advancement> progressChanged = new HashSet<>();
-    private final Set<Advancement> rootsToUpdate = new HashSet<>();
+    private final Map<Advancement, AdvancementProgress> progress = new LinkedHashMap();
+    private final Set<Advancement> visible = new HashSet();
+    private final Set<Advancement> progressChanged = new HashSet();
+    private final Set<Advancement> rootsToUpdate = new HashSet();
     private ServerPlayer player;
     @Nullable
     private Advancement lastSelectedTab;
     private boolean isFirstPacket = true;
+    public final Map<net.minecraft.advancements.critereon.SimpleCriterionTrigger, Set<CriterionTrigger.Listener>> criterionData = new java.util.IdentityHashMap<>(); // Paper - fix advancement data player leakage
 
     public PlayerAdvancements(DataFixer dataFixer, PlayerList playerManager, ServerAdvancementManager advancementLoader, Path filePath, ServerPlayer owner) {
         this.dataFixer = dataFixer;
@@ -73,8 +77,12 @@
     }
 
     public void stopListening() {
-        for(CriterionTrigger<?> criterionTrigger : CriteriaTriggers.all()) {
-            criterionTrigger.removePlayerListeners(this);
+        Iterator iterator = CriteriaTriggers.all().iterator();
+
+        while (iterator.hasNext()) {
+            CriterionTrigger<?> criteriontrigger = (CriterionTrigger) iterator.next();
+
+            criteriontrigger.removePlayerListeners(this);
         }
 
     }
@@ -91,14 +99,22 @@
     }
 
     private void registerListeners(ServerAdvancementManager advancementLoader) {
-        for(Advancement advancement : advancementLoader.getAllAdvancements()) {
+        Iterator iterator = advancementLoader.getAllAdvancements().iterator();
+
+        while (iterator.hasNext()) {
+            Advancement advancement = (Advancement) iterator.next();
+
             this.registerListeners(advancement);
         }
 
     }
 
     private void checkForAutomaticTriggers(ServerAdvancementManager advancementLoader) {
-        for(Advancement advancement : advancementLoader.getAllAdvancements()) {
+        Iterator iterator = advancementLoader.getAllAdvancements().iterator();
+
+        while (iterator.hasNext()) {
+            Advancement advancement = (Advancement) iterator.next();
+
             if (advancement.getCriteria().isEmpty()) {
                 this.award(advancement, "");
                 advancement.getRewards().grant(this.player);
@@ -108,32 +124,53 @@
     }
 
     private void load(ServerAdvancementManager advancementLoader) {
-        if (Files.isRegularFile(this.playerSavePath)) {
-            try (JsonReader jsonReader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8))) {
-                jsonReader.setLenient(false);
-                Dynamic<JsonElement> dynamic = new Dynamic<>(JsonOps.INSTANCE, Streams.parse(jsonReader));
-                int i = dynamic.get("DataVersion").asInt(1343);
-                dynamic = dynamic.remove("DataVersion");
-                dynamic = DataFixTypes.ADVANCEMENTS.updateToCurrentVersion(this.dataFixer, dynamic, i);
-                Map<ResourceLocation, AdvancementProgress> map = GSON.getAdapter(TYPE_TOKEN).fromJsonTree(dynamic.getValue());
-                if (map == null) {
-                    throw new JsonParseException("Found null for advancements");
-                }
+        if (Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
+            try {
+                JsonReader jsonreader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8));
 
-                map.entrySet().stream().sorted(Entry.comparingByValue()).forEach((entry) -> {
-                    Advancement advancement = advancementLoader.getAdvancement(entry.getKey());
-                    if (advancement == null) {
-                        LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.playerSavePath);
-                    } else {
-                        this.startProgress(advancement, entry.getValue());
-                        this.progressChanged.add(advancement);
-                        this.markForVisibilityUpdate(advancement);
+                try {
+                    jsonreader.setLenient(false);
+                    Dynamic<JsonElement> dynamic = new Dynamic(JsonOps.INSTANCE, Streams.parse(jsonreader));
+                    int i = dynamic.get("DataVersion").asInt(1343);
+
+                    dynamic = dynamic.remove("DataVersion");
+                    dynamic = DataFixTypes.ADVANCEMENTS.updateToCurrentVersion(this.dataFixer, dynamic, i);
+                    Map<ResourceLocation, AdvancementProgress> map = (Map) PlayerAdvancements.GSON.getAdapter(PlayerAdvancements.TYPE_TOKEN).fromJsonTree((JsonElement) dynamic.getValue());
+
+                    if (map == null) {
+                        throw new JsonParseException("Found null for advancements");
                     }
-                });
-            } catch (JsonParseException var8) {
-                LOGGER.error("Couldn't parse player advancements in {}", this.playerSavePath, var8);
-            } catch (IOException var9) {
-                LOGGER.error("Couldn't access player advancements in {}", this.playerSavePath, var9);
+
+                    map.entrySet().stream().sorted(Entry.comparingByValue()).forEach((entry) -> {
+                        Advancement advancement = advancementLoader.getAdvancement((ResourceLocation) entry.getKey());
+
+                        if (advancement == null) {
+                            // CraftBukkit start
+                            if (entry.getKey().getNamespace().equals("minecraft")) {
+                                PlayerAdvancements.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.playerSavePath);
+                            }
+                            // CraftBukkit end
+                        } else {
+                            this.startProgress(advancement, (AdvancementProgress) entry.getValue());
+                            this.progressChanged.add(advancement);
+                            this.markForVisibilityUpdate(advancement);
+                        }
+                    });
+                } catch (Throwable throwable) {
+                    try {
+                        jsonreader.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
+                    }
+
+                    throw throwable;
+                }
+
+                jsonreader.close();
+            } catch (JsonParseException jsonparseexception) {
+                PlayerAdvancements.LOGGER.error("Couldn't parse player advancements in {}", this.playerSavePath, jsonparseexception);
+            } catch (IOException ioexception) {
+                PlayerAdvancements.LOGGER.error("Couldn't access player advancements in {}", this.playerSavePath, ioexception);
             }
         }
 
@@ -142,68 +179,105 @@
     }
 
     public void save() {
-        Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap<>();
+        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
+        Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap();
+        Iterator iterator = this.progress.entrySet().iterator();
 
-        for(Map.Entry<Advancement, AdvancementProgress> entry : this.progress.entrySet()) {
-            AdvancementProgress advancementProgress = entry.getValue();
-            if (advancementProgress.hasProgress()) {
-                map.put(entry.getKey().getId(), advancementProgress);
+        while (iterator.hasNext()) {
+            Entry<Advancement, AdvancementProgress> entry = (Entry) iterator.next();
+            AdvancementProgress advancementprogress = (AdvancementProgress) entry.getValue();
+
+            if (advancementprogress.hasProgress()) {
+                map.put(((Advancement) entry.getKey()).getId(), advancementprogress);
             }
         }
 
-        JsonElement jsonElement = GSON.toJsonTree(map);
-        jsonElement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
+        JsonElement jsonelement = PlayerAdvancements.GSON.toJsonTree(map);
+
+        jsonelement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
 
         try {
             FileUtil.createDirectoriesSafe(this.playerSavePath.getParent());
+            BufferedWriter bufferedwriter = Files.newBufferedWriter(this.playerSavePath, StandardCharsets.UTF_8);
 
-            try (Writer writer = Files.newBufferedWriter(this.playerSavePath, StandardCharsets.UTF_8)) {
-                GSON.toJson(jsonElement, writer);
+            try {
+                PlayerAdvancements.GSON.toJson(jsonelement, bufferedwriter);
+            } catch (Throwable throwable) {
+                if (bufferedwriter != null) {
+                    try {
+                        bufferedwriter.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
+                    }
+                }
+
+                throw throwable;
             }
-        } catch (IOException var8) {
-            LOGGER.error("Couldn't save player advancements to {}", this.playerSavePath, var8);
+
+            if (bufferedwriter != null) {
+                bufferedwriter.close();
+            }
+        } catch (IOException ioexception) {
+            PlayerAdvancements.LOGGER.error("Couldn't save player advancements to {}", this.playerSavePath, ioexception);
         }
 
     }
 
     public boolean award(Advancement advancement, String criterionName) {
-        boolean bl = false;
-        AdvancementProgress advancementProgress = this.getOrStartProgress(advancement);
-        boolean bl2 = advancementProgress.isDone();
-        if (advancementProgress.grantProgress(criterionName)) {
+        boolean flag = false;
+        AdvancementProgress advancementprogress = this.getOrStartProgress(advancement);
+        boolean flag1 = advancementprogress.isDone();
+
+        if (advancementprogress.grantProgress(criterionName)) {
+            // Paper start
+            if (!new com.destroystokyo.paper.event.player.PlayerAdvancementCriterionGrantEvent(this.player.getBukkitEntity(), advancement.bukkit, criterionName).callEvent()) {
+                advancementprogress.revokeProgress(criterionName);
+                return false;
+            }
+            // Paper end
             this.unregisterListeners(advancement);
             this.progressChanged.add(advancement);
-            bl = true;
-            if (!bl2 && advancementProgress.isDone()) {
+            flag = true;
+            if (!flag1 && advancementprogress.isDone()) {
+                // Paper start - Add Adventure message to PlayerAdvancementDoneEvent
+                boolean announceToChat = advancement.getDisplay() != null && advancement.getDisplay().shouldAnnounceChat();
+                net.kyori.adventure.text.Component message = announceToChat ? io.papermc.paper.adventure.PaperAdventure.asAdventure(Component.translatable("chat.type.advancement." + advancement.getDisplay().getFrame().getName(), this.player.getDisplayName(), advancement.getChatComponent())) : null;
+                org.bukkit.event.player.PlayerAdvancementDoneEvent event = new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit, message);
+                this.player.level().getCraftServer().getPluginManager().callEvent(event);
+                message = event.message();
+                // Paper end
                 advancement.getRewards().grant(this.player);
-                if (advancement.getDisplay() != null && advancement.getDisplay().shouldAnnounceChat() && this.player.level().getGameRules().getBoolean(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)) {
-                    this.playerList.broadcastSystemMessage(Component.translatable("chat.type.advancement." + advancement.getDisplay().getFrame().getName(), this.player.getDisplayName(), advancement.getChatComponent()), false);
+                // Paper start - Add Adventure message to PlayerAdvancementDoneEvent
+                if (message != null && this.player.level().getGameRules().getBoolean(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)) {
+                    this.playerList.broadcastSystemMessage(io.papermc.paper.adventure.PaperAdventure.asVanilla(message), false);
+                    // Paper end
                 }
             }
         }
 
-        if (!bl2 && advancementProgress.isDone()) {
+        if (!flag1 && advancementprogress.isDone()) {
             this.markForVisibilityUpdate(advancement);
         }
 
-        return bl;
+        return flag;
     }
 
     public boolean revoke(Advancement advancement, String criterionName) {
-        boolean bl = false;
-        AdvancementProgress advancementProgress = this.getOrStartProgress(advancement);
-        boolean bl2 = advancementProgress.isDone();
-        if (advancementProgress.revokeProgress(criterionName)) {
+        boolean flag = false;
+        AdvancementProgress advancementprogress = this.getOrStartProgress(advancement);
+        boolean flag1 = advancementprogress.isDone();
+
+        if (advancementprogress.revokeProgress(criterionName)) {
             this.registerListeners(advancement);
             this.progressChanged.add(advancement);
-            bl = true;
+            flag = true;
         }
 
-        if (bl2 && !advancementProgress.isDone()) {
+        if (flag1 && !advancementprogress.isDone()) {
             this.markForVisibilityUpdate(advancement);
         }
 
-        return bl;
+        return flag;
     }
 
     private void markForVisibilityUpdate(Advancement advancement) {
@@ -211,16 +285,23 @@
     }
 
     private void registerListeners(Advancement advancement) {
-        AdvancementProgress advancementProgress = this.getOrStartProgress(advancement);
-        if (!advancementProgress.isDone()) {
-            for(Map.Entry<String, Criterion> entry : advancement.getCriteria().entrySet()) {
-                CriterionProgress criterionProgress = advancementProgress.getCriterion(entry.getKey());
-                if (criterionProgress != null && !criterionProgress.isDone()) {
-                    CriterionTriggerInstance criterionTriggerInstance = entry.getValue().getTrigger();
-                    if (criterionTriggerInstance != null) {
-                        CriterionTrigger<CriterionTriggerInstance> criterionTrigger = CriteriaTriggers.getCriterion(criterionTriggerInstance.getCriterion());
-                        if (criterionTrigger != null) {
-                            criterionTrigger.addPlayerListener(this, new CriterionTrigger.Listener<>(criterionTriggerInstance, advancement, entry.getKey()));
+        AdvancementProgress advancementprogress = this.getOrStartProgress(advancement);
+
+        if (!advancementprogress.isDone()) {
+            Iterator iterator = advancement.getCriteria().entrySet().iterator();
+
+            while (iterator.hasNext()) {
+                Entry<String, Criterion> entry = (Entry) iterator.next();
+                CriterionProgress criterionprogress = advancementprogress.getCriterion((String) entry.getKey());
+
+                if (criterionprogress != null && !criterionprogress.isDone()) {
+                    CriterionTriggerInstance criterioninstance = ((Criterion) entry.getValue()).getTrigger();
+
+                    if (criterioninstance != null) {
+                        CriterionTrigger<CriterionTriggerInstance> criteriontrigger = CriteriaTriggers.getCriterion(criterioninstance.getCriterion());
+
+                        if (criteriontrigger != null) {
+                            criteriontrigger.addPlayerListener(this, new CriterionTrigger.Listener<>(criterioninstance, advancement, (String) entry.getKey()));
                         }
                     }
                 }
@@ -230,16 +311,21 @@
     }
 
     private void unregisterListeners(Advancement advancement) {
-        AdvancementProgress advancementProgress = this.getOrStartProgress(advancement);
+        AdvancementProgress advancementprogress = this.getOrStartProgress(advancement);
+        Iterator iterator = advancement.getCriteria().entrySet().iterator();
 
-        for(Map.Entry<String, Criterion> entry : advancement.getCriteria().entrySet()) {
-            CriterionProgress criterionProgress = advancementProgress.getCriterion(entry.getKey());
-            if (criterionProgress != null && (criterionProgress.isDone() || advancementProgress.isDone())) {
-                CriterionTriggerInstance criterionTriggerInstance = entry.getValue().getTrigger();
-                if (criterionTriggerInstance != null) {
-                    CriterionTrigger<CriterionTriggerInstance> criterionTrigger = CriteriaTriggers.getCriterion(criterionTriggerInstance.getCriterion());
-                    if (criterionTrigger != null) {
-                        criterionTrigger.removePlayerListener(this, new CriterionTrigger.Listener<>(criterionTriggerInstance, advancement, entry.getKey()));
+        while (iterator.hasNext()) {
+            Entry<String, Criterion> entry = (Entry) iterator.next();
+            CriterionProgress criterionprogress = advancementprogress.getCriterion((String) entry.getKey());
+
+            if (criterionprogress != null && (criterionprogress.isDone() || advancementprogress.isDone())) {
+                CriterionTriggerInstance criterioninstance = ((Criterion) entry.getValue()).getTrigger();
+
+                if (criterioninstance != null) {
+                    CriterionTrigger<CriterionTriggerInstance> criteriontrigger = CriteriaTriggers.getCriterion(criterioninstance.getCriterion());
+
+                    if (criteriontrigger != null) {
+                        criteriontrigger.removePlayerListener(this, new CriterionTrigger.Listener<>(criterioninstance, advancement, (String) entry.getKey()));
                     }
                 }
             }
@@ -249,25 +335,31 @@
 
     public void flushDirty(ServerPlayer player) {
         if (this.isFirstPacket || !this.rootsToUpdate.isEmpty() || !this.progressChanged.isEmpty()) {
-            Map<ResourceLocation, AdvancementProgress> map = new HashMap<>();
-            Set<Advancement> set = new HashSet<>();
-            Set<ResourceLocation> set2 = new HashSet<>();
+            Map<ResourceLocation, AdvancementProgress> map = new HashMap();
+            Set<Advancement> set = new HashSet();
+            Set<ResourceLocation> set1 = new HashSet();
+            Iterator iterator = this.rootsToUpdate.iterator();
 
-            for(Advancement advancement : this.rootsToUpdate) {
-                this.updateTreeVisibility(advancement, set, set2);
+            Advancement advancement;
+
+            while (iterator.hasNext()) {
+                advancement = (Advancement) iterator.next();
+                this.updateTreeVisibility(advancement, set, set1);
             }
 
             this.rootsToUpdate.clear();
+            iterator = this.progressChanged.iterator();
 
-            for(Advancement advancement2 : this.progressChanged) {
-                if (this.visible.contains(advancement2)) {
-                    map.put(advancement2.getId(), this.progress.get(advancement2));
+            while (iterator.hasNext()) {
+                advancement = (Advancement) iterator.next();
+                if (this.visible.contains(advancement)) {
+                    map.put(advancement.getId(), (AdvancementProgress) this.progress.get(advancement));
                 }
             }
 
             this.progressChanged.clear();
-            if (!map.isEmpty() || !set.isEmpty() || !set2.isEmpty()) {
-                player.connection.send(new ClientboundUpdateAdvancementsPacket(this.isFirstPacket, set, set2, map));
+            if (!map.isEmpty() || !set.isEmpty() || !set1.isEmpty()) {
+                player.connection.send(new ClientboundUpdateAdvancementsPacket(this.isFirstPacket, set, set1, map));
             }
         }
 
@@ -275,27 +367,29 @@
     }
 
     public void setSelectedTab(@Nullable Advancement advancement) {
-        Advancement advancement2 = this.lastSelectedTab;
+        Advancement advancement1 = this.lastSelectedTab;
+
         if (advancement != null && advancement.getParent() == null && advancement.getDisplay() != null) {
             this.lastSelectedTab = advancement;
         } else {
             this.lastSelectedTab = null;
         }
 
-        if (advancement2 != this.lastSelectedTab) {
+        if (advancement1 != this.lastSelectedTab) {
             this.player.connection.send(new ClientboundSelectAdvancementsTabPacket(this.lastSelectedTab == null ? null : this.lastSelectedTab.getId()));
         }
 
     }
 
     public AdvancementProgress getOrStartProgress(Advancement advancement) {
-        AdvancementProgress advancementProgress = this.progress.get(advancement);
-        if (advancementProgress == null) {
-            advancementProgress = new AdvancementProgress();
-            this.startProgress(advancement, advancementProgress);
+        AdvancementProgress advancementprogress = (AdvancementProgress) this.progress.get(advancement);
+
+        if (advancementprogress == null) {
+            advancementprogress = new AdvancementProgress();
+            this.startProgress(advancement, advancementprogress);
         }
 
-        return advancementProgress;
+        return advancementprogress;
     }
 
     private void startProgress(Advancement advancement, AdvancementProgress progress) {
@@ -304,18 +398,18 @@
     }
 
     private void updateTreeVisibility(Advancement root, Set<Advancement> added, Set<ResourceLocation> removed) {
-        AdvancementVisibilityEvaluator.evaluateVisibility(root, (advancement) -> {
-            return this.getOrStartProgress(advancement).isDone();
-        }, (advancement, displayed) -> {
-            if (displayed) {
-                if (this.visible.add(advancement)) {
-                    added.add(advancement);
-                    if (this.progress.containsKey(advancement)) {
-                        this.progressChanged.add(advancement);
+        AdvancementVisibilityEvaluator.evaluateVisibility(root, (advancement1) -> {
+            return this.getOrStartProgress(advancement1).isDone();
+        }, (advancement1, flag) -> {
+            if (flag) {
+                if (this.visible.add(advancement1)) {
+                    added.add(advancement1);
+                    if (this.progress.containsKey(advancement1)) {
+                        this.progressChanged.add(advancement1);
                     }
                 }
-            } else if (this.visible.remove(advancement)) {
-                removed.add(advancement.getId());
+            } else if (this.visible.remove(advancement1)) {
+                removed.add(advancement1.getId());
             }
 
         });
