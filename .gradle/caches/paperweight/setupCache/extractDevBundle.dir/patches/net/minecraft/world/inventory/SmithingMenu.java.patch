--- a/net/minecraft/world/inventory/SmithingMenu.java
+++ b/net/minecraft/world/inventory/SmithingMenu.java
@@ -11,8 +11,10 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.craftbukkit.v1_20_R1.inventory.CraftInventoryView; // CraftBukkit
 
 public class SmithingMenu extends ItemCombinerMenu {
+
     public static final int TEMPLATE_SLOT = 0;
     public static final int BASE_SLOT = 1;
     public static final int ADDITIONAL_SLOT = 2;
@@ -26,6 +28,9 @@
     @Nullable
     private SmithingRecipe selectedRecipe;
     private final List<SmithingRecipe> recipes;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity;
+    // CraftBukkit end
 
     public SmithingMenu(int syncId, Inventory playerInventory) {
         this(syncId, playerInventory, ContainerLevelAccess.NULL);
@@ -39,17 +44,17 @@
 
     @Override
     protected ItemCombinerMenuSlotDefinition createInputSlotDefinitions() {
-        return ItemCombinerMenuSlotDefinition.create().withSlot(0, 8, 48, (stack) -> {
-            return this.recipes.stream().anyMatch((recipe) -> {
-                return recipe.isTemplateIngredient(stack);
+        return ItemCombinerMenuSlotDefinition.create().withSlot(0, 8, 48, (itemstack) -> {
+            return this.recipes.stream().anyMatch((smithingrecipe) -> {
+                return smithingrecipe.isTemplateIngredient(itemstack);
             });
-        }).withSlot(1, 26, 48, (stack) -> {
-            return this.recipes.stream().anyMatch((smithingRecipe) -> {
-                return smithingRecipe.isBaseIngredient(stack);
+        }).withSlot(1, 26, 48, (itemstack) -> {
+            return this.recipes.stream().anyMatch((smithingrecipe) -> {
+                return smithingrecipe.isBaseIngredient(itemstack);
             });
-        }).withSlot(2, 44, 48, (stack) -> {
-            return this.recipes.stream().anyMatch((smithingRecipe) -> {
-                return smithingRecipe.isAdditionIngredient(stack);
+        }).withSlot(2, 44, 48, (itemstack) -> {
+            return this.recipes.stream().anyMatch((smithingrecipe) -> {
+                return smithingrecipe.isAdditionIngredient(itemstack);
             });
         }).withResultSlot(3, 98, 48).build();
     }
@@ -71,8 +76,8 @@
         this.shrinkStackInSlot(0);
         this.shrinkStackInSlot(1);
         this.shrinkStackInSlot(2);
-        this.access.execute((world, pos) -> {
-            world.levelEvent(1044, pos, 0);
+        this.access.execute((world, blockposition) -> {
+            world.levelEvent(1044, blockposition, 0);
         });
     }
 
@@ -81,10 +86,11 @@
     }
 
     private void shrinkStackInSlot(int slot) {
-        ItemStack itemStack = this.inputSlots.getItem(slot);
-        if (!itemStack.isEmpty()) {
-            itemStack.shrink(1);
-            this.inputSlots.setItem(slot, itemStack);
+        ItemStack itemstack = this.inputSlots.getItem(slot);
+
+        if (!itemstack.isEmpty()) {
+            itemstack.shrink(1);
+            this.inputSlots.setItem(slot, itemstack);
         }
 
     }
@@ -92,35 +98,34 @@
     @Override
     public void createResult() {
         List<SmithingRecipe> list = this.level.getRecipeManager().getRecipesFor(RecipeType.SMITHING, this.inputSlots, this.level);
+
         if (list.isEmpty()) {
-            this.resultSlots.setItem(0, ItemStack.EMPTY);
+            org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory.callPrepareSmithingEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
         } else {
-            SmithingRecipe smithingRecipe = list.get(0);
-            ItemStack itemStack = smithingRecipe.assemble(this.inputSlots, this.level.registryAccess());
-            if (itemStack.isItemEnabled(this.level.enabledFeatures())) {
-                this.selectedRecipe = smithingRecipe;
-                this.resultSlots.setRecipeUsed(smithingRecipe);
-                this.resultSlots.setItem(0, itemStack);
+            SmithingRecipe smithingrecipe = (SmithingRecipe) list.get(0);
+            ItemStack itemstack = smithingrecipe.assemble(this.inputSlots, this.level.registryAccess());
+
+            if (itemstack.isItemEnabled(this.level.enabledFeatures())) {
+                this.selectedRecipe = smithingrecipe;
+                this.resultSlots.setRecipeUsed(smithingrecipe);
+                // CraftBukkit start
+                org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory.callPrepareSmithingEvent(this.getBukkitView(), itemstack);
+                // CraftBukkit end
             }
         }
 
+        org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory.callPrepareResultEvent(this, RESULT_SLOT); // Paper
     }
 
     @Override
     public int getSlotToQuickMoveTo(ItemStack stack) {
-        return this.recipes.stream().map((recipe) -> {
-            return findSlotMatchingIngredient(recipe, stack);
-        }).filter(Optional::isPresent).findFirst().orElse(Optional.of(0)).get();
+        return (Integer) ((Optional) this.recipes.stream().map((smithingrecipe) -> {
+            return SmithingMenu.findSlotMatchingIngredient(smithingrecipe, stack);
+        }).filter(Optional::isPresent).findFirst().orElse(Optional.of(0))).get();
     }
 
     private static Optional<Integer> findSlotMatchingIngredient(SmithingRecipe recipe, ItemStack stack) {
-        if (recipe.isTemplateIngredient(stack)) {
-            return Optional.of(0);
-        } else if (recipe.isBaseIngredient(stack)) {
-            return Optional.of(1);
-        } else {
-            return recipe.isAdditionIngredient(stack) ? Optional.of(2) : Optional.empty();
-        }
+        return recipe.isTemplateIngredient(stack) ? Optional.of(0) : (recipe.isBaseIngredient(stack) ? Optional.of(1) : (recipe.isAdditionIngredient(stack) ? Optional.of(2) : Optional.empty()));
     }
 
     @Override
@@ -130,8 +135,22 @@
 
     @Override
     public boolean canMoveIntoInputSlots(ItemStack stack) {
-        return this.recipes.stream().map((recipe) -> {
-            return findSlotMatchingIngredient(recipe, stack);
+        return this.recipes.stream().map((smithingrecipe) -> {
+            return SmithingMenu.findSlotMatchingIngredient(smithingrecipe, stack);
         }).anyMatch(Optional::isPresent);
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (this.bukkitEntity != null) {
+            return this.bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.v1_20_R1.inventory.CraftInventory inventory = new org.bukkit.craftbukkit.v1_20_R1.inventory.CraftInventorySmithing(
+                access.getLocation(), this.inputSlots, this.resultSlots);
+        this.bukkitEntity = new CraftInventoryView(this.player.getBukkitEntity(), inventory, this);
+        return this.bukkitEntity;
+    }
+    // CraftBukkit end
 }
