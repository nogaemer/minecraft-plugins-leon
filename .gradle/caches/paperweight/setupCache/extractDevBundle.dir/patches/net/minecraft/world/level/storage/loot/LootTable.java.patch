--- a/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/net/minecraft/world/level/storage/loot/LootTable.java
@@ -10,9 +10,11 @@
 import com.google.gson.JsonSerializer;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.lang.reflect.Type;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
@@ -32,9 +34,17 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.stream.Collectors;
+import org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_20_R1.inventory.CraftItemStack;
+import org.bukkit.event.world.LootGenerateEvent;
+// CraftBukkit end
+
 public class LootTable {
+
     static final Logger LOGGER = LogUtils.getLogger();
-    public static final LootTable EMPTY = new LootTable(LootContextParamSets.EMPTY, (ResourceLocation)null, new LootPool[0], new LootItemFunction[0]);
+    public static final LootTable EMPTY = new LootTable(LootContextParamSets.EMPTY, (ResourceLocation) null, new LootPool[0], new LootItemFunction[0]);
     public static final LootContextParamSet DEFAULT_PARAM_SET = LootContextParamSets.ALL_PARAMS;
     final LootContextParamSet paramSet;
     @Nullable
@@ -52,17 +62,19 @@
     }
 
     public static Consumer<ItemStack> createStackSplitter(ServerLevel world, Consumer<ItemStack> consumer) {
-        return (stack) -> {
-            if (stack.isItemEnabled(world.enabledFeatures())) {
-                if (stack.getCount() < stack.getMaxStackSize()) {
-                    consumer.accept(stack);
+        boolean skipSplitter = world != null && !world.paperConfig().fixes.splitOverstackedLoot; // Paper - preserve overstacked items
+        return (itemstack) -> {
+            if (itemstack.isItemEnabled(world.enabledFeatures())) {
+                if (skipSplitter || itemstack.getCount() < itemstack.getMaxStackSize()) { // Paper - preserve overstacked items
+                    consumer.accept(itemstack);
                 } else {
-                    int i = stack.getCount();
+                    int i = itemstack.getCount();
 
-                    while(i > 0) {
-                        ItemStack itemStack = stack.copyWithCount(Math.min(stack.getMaxStackSize(), i));
-                        i -= itemStack.getCount();
-                        consumer.accept(itemStack);
+                    while (i > 0) {
+                        ItemStack itemstack1 = itemstack.copyWithCount(Math.min(itemstack.getMaxStackSize(), i));
+
+                        i -= itemstack1.getCount();
+                        consumer.accept(itemstack1);
                     }
                 }
 
@@ -75,31 +87,36 @@
     }
 
     public void getRandomItemsRaw(LootContext context, Consumer<ItemStack> lootConsumer) {
-        LootContext.VisitedEntry<?> visitedEntry = LootContext.createVisitedEntry(this);
-        if (context.pushVisitedElement(visitedEntry)) {
-            Consumer<ItemStack> consumer = LootItemFunction.decorate(this.compositeFunction, lootConsumer, context);
+        LootContext.VisitedEntry<?> loottableinfo_c = LootContext.createVisitedEntry(this);
 
-            for(LootPool lootPool : this.pools) {
-                lootPool.addRandomItems(consumer, context);
+        if (context.pushVisitedElement(loottableinfo_c)) {
+            Consumer<ItemStack> consumer1 = LootItemFunction.decorate(this.compositeFunction, lootConsumer, context);
+            LootPool[] alootselector = this.pools;
+            int i = alootselector.length;
+
+            for (int j = 0; j < i; ++j) {
+                LootPool lootselector = alootselector[j];
+
+                lootselector.addRandomItems(consumer1, context);
             }
 
-            context.popVisitedElement(visitedEntry);
+            context.popVisitedElement(loottableinfo_c);
         } else {
-            LOGGER.warn("Detected infinite loop in loot tables");
+            LootTable.LOGGER.warn("Detected infinite loop in loot tables");
         }
 
     }
 
     public void getRandomItems(LootParams parameters, long seed, Consumer<ItemStack> lootConsumer) {
-        this.getRandomItemsRaw((new LootContext.Builder(parameters)).withOptionalRandomSeed(seed).create(this.randomSequence), createStackSplitter(parameters.getLevel(), lootConsumer));
+        this.getRandomItemsRaw((new LootContext.Builder(parameters)).withOptionalRandomSeed(seed).create(this.randomSequence), LootTable.createStackSplitter(parameters.getLevel(), lootConsumer));
     }
 
     public void getRandomItems(LootParams parameters, Consumer<ItemStack> lootConsumer) {
-        this.getRandomItemsRaw(parameters, createStackSplitter(parameters.getLevel(), lootConsumer));
+        this.getRandomItemsRaw(parameters, LootTable.createStackSplitter(parameters.getLevel(), lootConsumer));
     }
 
     public void getRandomItems(LootContext context, Consumer<ItemStack> lootConsumer) {
-        this.getRandomItemsRaw(context, createStackSplitter(context.getLevel(), lootConsumer));
+        this.getRandomItemsRaw(context, LootTable.createStackSplitter(context.getLevel(), lootConsumer));
     }
 
     public ObjectArrayList<ItemStack> getRandomItems(LootParams parameters, long seed) {
@@ -111,9 +128,11 @@
     }
 
     private ObjectArrayList<ItemStack> getRandomItems(LootContext context) {
-        ObjectArrayList<ItemStack> objectArrayList = new ObjectArrayList<>();
-        this.getRandomItems(context, objectArrayList::add);
-        return objectArrayList;
+        ObjectArrayList<ItemStack> objectarraylist = new ObjectArrayList();
+
+        Objects.requireNonNull(objectarraylist);
+        this.getRandomItems(context, objectarraylist::add);
+        return objectarraylist;
     }
 
     public LootContextParamSet getParamSet() {
@@ -121,33 +140,52 @@
     }
 
     public void validate(ValidationContext reporter) {
-        for(int i = 0; i < this.pools.length; ++i) {
+        int i;
+
+        for (i = 0; i < this.pools.length; ++i) {
             this.pools[i].validate(reporter.forChild(".pools[" + i + "]"));
         }
 
-        for(int j = 0; j < this.functions.length; ++j) {
-            this.functions[j].validate(reporter.forChild(".functions[" + j + "]"));
+        for (i = 0; i < this.functions.length; ++i) {
+            this.functions[i].validate(reporter.forChild(".functions[" + i + "]"));
         }
 
     }
 
     public void fill(Container inventory, LootParams parameters, long seed) {
-        LootContext lootContext = (new LootContext.Builder(parameters)).withOptionalRandomSeed(seed).create(this.randomSequence);
-        ObjectArrayList<ItemStack> objectArrayList = this.getRandomItems(lootContext);
-        RandomSource randomSource = lootContext.getRandom();
-        List<Integer> list = this.getAvailableSlots(inventory, randomSource);
-        this.shuffleAndSplitItems(objectArrayList, list.size(), randomSource);
+        // CraftBukkit start
+        this.fillInventory(inventory, parameters, seed, false);
+    }
+
+    public void fillInventory(Container iinventory, LootParams lootparams, long i, boolean plugin) {
+        // CraftBukkit end
+        LootContext loottableinfo = (new LootContext.Builder(lootparams)).withOptionalRandomSeed(i).create(this.randomSequence);
+        ObjectArrayList<ItemStack> objectarraylist = this.getRandomItems(loottableinfo);
+        RandomSource randomsource = loottableinfo.getRandom();
+        // CraftBukkit start
+        LootGenerateEvent event = CraftEventFactory.callLootGenerateEvent(iinventory, this, loottableinfo, objectarraylist, plugin);
+        if (event.isCancelled()) {
+            return;
+        }
+        objectarraylist = event.getLoot().stream().map(CraftItemStack::asNMSCopy).collect(ObjectArrayList.toList());
+        // CraftBukkit end
+        List<Integer> list = this.getAvailableSlots(iinventory, randomsource);
+
+        this.shuffleAndSplitItems(objectarraylist, list.size(), randomsource);
+        ObjectListIterator objectlistiterator = objectarraylist.iterator();
+
+        while (objectlistiterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) objectlistiterator.next();
 
-        for(ItemStack itemStack : objectArrayList) {
             if (list.isEmpty()) {
-                LOGGER.warn("Tried to over-fill a container");
+                LootTable.LOGGER.warn("Tried to over-fill a container");
                 return;
             }
 
-            if (itemStack.isEmpty()) {
-                inventory.setItem(list.remove(list.size() - 1), ItemStack.EMPTY);
+            if (itemstack.isEmpty()) {
+                iinventory.setItem((Integer) list.remove(list.size() - 1), ItemStack.EMPTY);
             } else {
-                inventory.setItem(list.remove(list.size() - 1), itemStack);
+                iinventory.setItem((Integer) list.remove(list.size() - 1), itemstack);
             }
         }
 
@@ -155,32 +193,34 @@
 
     private void shuffleAndSplitItems(ObjectArrayList<ItemStack> drops, int freeSlots, RandomSource random) {
         List<ItemStack> list = Lists.newArrayList();
-        Iterator<ItemStack> iterator = drops.iterator();
+        ObjectListIterator objectlistiterator = drops.iterator();
 
-        while(iterator.hasNext()) {
-            ItemStack itemStack = iterator.next();
-            if (itemStack.isEmpty()) {
-                iterator.remove();
-            } else if (itemStack.getCount() > 1) {
-                list.add(itemStack);
-                iterator.remove();
+        while (objectlistiterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) objectlistiterator.next();
+
+            if (itemstack.isEmpty()) {
+                objectlistiterator.remove();
+            } else if (itemstack.getCount() > 1) {
+                list.add(itemstack);
+                objectlistiterator.remove();
             }
         }
 
-        while(freeSlots - drops.size() - list.size() > 0 && !list.isEmpty()) {
-            ItemStack itemStack2 = list.remove(Mth.nextInt(random, 0, list.size() - 1));
-            int i = Mth.nextInt(random, 1, itemStack2.getCount() / 2);
-            ItemStack itemStack3 = itemStack2.split(i);
-            if (itemStack2.getCount() > 1 && random.nextBoolean()) {
-                list.add(itemStack2);
+        while (freeSlots - drops.size() - list.size() > 0 && !list.isEmpty()) {
+            ItemStack itemstack1 = (ItemStack) list.remove(Mth.nextInt(random, 0, list.size() - 1));
+            int j = Mth.nextInt(random, 1, itemstack1.getCount() / 2);
+            ItemStack itemstack2 = itemstack1.split(j);
+
+            if (itemstack1.getCount() > 1 && random.nextBoolean()) {
+                list.add(itemstack1);
             } else {
-                drops.add(itemStack2);
+                drops.add(itemstack1);
             }
 
-            if (itemStack3.getCount() > 1 && random.nextBoolean()) {
-                list.add(itemStack3);
+            if (itemstack2.getCount() > 1 && random.nextBoolean()) {
+                list.add(itemstack2);
             } else {
-                drops.add(itemStack3);
+                drops.add(itemstack2);
             }
         }
 
@@ -189,16 +229,16 @@
     }
 
     private List<Integer> getAvailableSlots(Container inventory, RandomSource random) {
-        ObjectArrayList<Integer> objectArrayList = new ObjectArrayList<>();
+        ObjectArrayList<Integer> objectarraylist = new ObjectArrayList();
 
-        for(int i = 0; i < inventory.getContainerSize(); ++i) {
+        for (int i = 0; i < inventory.getContainerSize(); ++i) {
             if (inventory.getItem(i).isEmpty()) {
-                objectArrayList.add(i);
+                objectarraylist.add(i);
             }
         }
 
-        Util.shuffle(objectArrayList, random);
-        return objectArrayList;
+        Util.shuffle(objectarraylist, random);
+        return objectarraylist;
     }
 
     public static LootTable.Builder lootTable() {
@@ -206,11 +246,17 @@
     }
 
     public static class Builder implements FunctionUserBuilder<LootTable.Builder> {
+
         private final List<LootPool> pools = Lists.newArrayList();
         private final List<LootItemFunction> functions = Lists.newArrayList();
-        private LootContextParamSet paramSet = LootTable.DEFAULT_PARAM_SET;
+        private LootContextParamSet paramSet;
         @Nullable
-        private ResourceLocation randomSequence = null;
+        private ResourceLocation randomSequence;
+
+        public Builder() {
+            this.paramSet = LootTable.DEFAULT_PARAM_SET;
+            this.randomSequence = null;
+        }
 
         public LootTable.Builder withPool(LootPool.Builder poolBuilder) {
             this.pools.add(poolBuilder.build());
@@ -228,8 +274,8 @@
         }
 
         @Override
-        public LootTable.Builder apply(LootItemFunction.Builder builder) {
-            this.functions.add(builder.build());
+        public LootTable.Builder apply(LootItemFunction.Builder function) {
+            this.functions.add(function.build());
             return this;
         }
 
@@ -239,58 +285,66 @@
         }
 
         public LootTable build() {
-            return new LootTable(this.paramSet, this.randomSequence, this.pools.toArray(new LootPool[0]), this.functions.toArray(new LootItemFunction[0]));
+            return new LootTable(this.paramSet, this.randomSequence, (LootPool[]) this.pools.toArray(new LootPool[0]), (LootItemFunction[]) this.functions.toArray(new LootItemFunction[0]));
         }
     }
 
     public static class Serializer implements JsonDeserializer<LootTable>, JsonSerializer<LootTable> {
-        @Override
-        public LootTable deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            JsonObject jsonObject = GsonHelper.convertToJsonObject(jsonElement, "loot table");
-            LootPool[] lootPools = GsonHelper.getAsObject(jsonObject, "pools", new LootPool[0], jsonDeserializationContext, LootPool[].class);
-            LootContextParamSet lootContextParamSet = null;
-            if (jsonObject.has("type")) {
-                String string = GsonHelper.getAsString(jsonObject, "type");
-                lootContextParamSet = LootContextParamSets.get(new ResourceLocation(string));
+
+        public Serializer() {}
+
+        public LootTable deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "loot table");
+            LootPool[] alootselector = (LootPool[]) GsonHelper.getAsObject(jsonobject, "pools", new LootPool[0], jsondeserializationcontext, LootPool[].class);
+            LootContextParamSet lootcontextparameterset = null;
+
+            if (jsonobject.has("type")) {
+                String s = GsonHelper.getAsString(jsonobject, "type");
+
+                lootcontextparameterset = LootContextParamSets.get(new ResourceLocation(s));
             }
 
-            ResourceLocation resourceLocation;
-            if (jsonObject.has("random_sequence")) {
-                String string2 = GsonHelper.getAsString(jsonObject, "random_sequence");
-                resourceLocation = new ResourceLocation(string2);
+            ResourceLocation minecraftkey;
+
+            if (jsonobject.has("random_sequence")) {
+                String s1 = GsonHelper.getAsString(jsonobject, "random_sequence");
+
+                minecraftkey = new ResourceLocation(s1);
             } else {
-                resourceLocation = null;
+                minecraftkey = null;
             }
 
-            LootItemFunction[] lootItemFunctions = GsonHelper.getAsObject(jsonObject, "functions", new LootItemFunction[0], jsonDeserializationContext, LootItemFunction[].class);
-            return new LootTable(lootContextParamSet != null ? lootContextParamSet : LootContextParamSets.ALL_PARAMS, resourceLocation, lootPools, lootItemFunctions);
+            LootItemFunction[] alootitemfunction = (LootItemFunction[]) GsonHelper.getAsObject(jsonobject, "functions", new LootItemFunction[0], jsondeserializationcontext, LootItemFunction[].class);
+
+            return new LootTable(lootcontextparameterset != null ? lootcontextparameterset : LootContextParamSets.ALL_PARAMS, minecraftkey, alootselector, alootitemfunction);
         }
 
-        @Override
-        public JsonElement serialize(LootTable lootTable, Type type, JsonSerializationContext jsonSerializationContext) {
-            JsonObject jsonObject = new JsonObject();
-            if (lootTable.paramSet != LootTable.DEFAULT_PARAM_SET) {
-                ResourceLocation resourceLocation = LootContextParamSets.getKey(lootTable.paramSet);
-                if (resourceLocation != null) {
-                    jsonObject.addProperty("type", resourceLocation.toString());
+        public JsonElement serialize(LootTable loottable, Type type, JsonSerializationContext jsonserializationcontext) {
+            JsonObject jsonobject = new JsonObject();
+
+            if (loottable.paramSet != LootTable.DEFAULT_PARAM_SET) {
+                ResourceLocation minecraftkey = LootContextParamSets.getKey(loottable.paramSet);
+
+                if (minecraftkey != null) {
+                    jsonobject.addProperty("type", minecraftkey.toString());
                 } else {
-                    LootTable.LOGGER.warn("Failed to find id for param set {}", (Object)lootTable.paramSet);
+                    LootTable.LOGGER.warn("Failed to find id for param set {}", loottable.paramSet);
                 }
             }
 
-            if (lootTable.randomSequence != null) {
-                jsonObject.addProperty("random_sequence", lootTable.randomSequence.toString());
+            if (loottable.randomSequence != null) {
+                jsonobject.addProperty("random_sequence", loottable.randomSequence.toString());
             }
 
-            if (lootTable.pools.length > 0) {
-                jsonObject.add("pools", jsonSerializationContext.serialize(lootTable.pools));
+            if (loottable.pools.length > 0) {
+                jsonobject.add("pools", jsonserializationcontext.serialize(loottable.pools));
             }
 
-            if (!ArrayUtils.isEmpty((Object[])lootTable.functions)) {
-                jsonObject.add("functions", jsonSerializationContext.serialize(lootTable.functions));
+            if (!ArrayUtils.isEmpty(loottable.functions)) {
+                jsonobject.add("functions", jsonserializationcontext.serialize(loottable.functions));
             }
 
-            return jsonObject;
+            return jsonobject;
         }
     }
 }
