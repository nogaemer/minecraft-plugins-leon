--- a/net/minecraft/world/entity/Display.java
+++ b/net/minecraft/world/entity/Display.java
@@ -4,8 +4,10 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.math.Transformation;
 import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
@@ -17,6 +19,7 @@
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
@@ -41,6 +44,7 @@
 import org.slf4j.Logger;
 
 public abstract class Display extends Entity {
+
     static final Logger LOGGER = LogUtils.getLogger();
     public static final int NO_BRIGHTNESS_OVERRIDE = -1;
     private static final EntityDataAccessor<Integer> DATA_INTERPOLATION_START_DELTA_TICKS_ID = SynchedEntityData.defineId(Display.class, EntityDataSerializers.INT);
@@ -57,7 +61,7 @@
     private static final EntityDataAccessor<Float> DATA_WIDTH_ID = SynchedEntityData.defineId(Display.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Float> DATA_HEIGHT_ID = SynchedEntityData.defineId(Display.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_GLOW_COLOR_OVERRIDE_ID = SynchedEntityData.defineId(Display.class, EntityDataSerializers.INT);
-    private static final IntSet RENDER_STATE_IDS = IntSet.of(DATA_TRANSLATION_ID.getId(), DATA_SCALE_ID.getId(), DATA_LEFT_ROTATION_ID.getId(), DATA_RIGHT_ROTATION_ID.getId(), DATA_BILLBOARD_RENDER_CONSTRAINTS_ID.getId(), DATA_BRIGHTNESS_OVERRIDE_ID.getId(), DATA_SHADOW_RADIUS_ID.getId(), DATA_SHADOW_STRENGTH_ID.getId());
+    private static final IntSet RENDER_STATE_IDS = IntSet.of(new int[]{Display.DATA_TRANSLATION_ID.getId(), Display.DATA_SCALE_ID.getId(), Display.DATA_LEFT_ROTATION_ID.getId(), Display.DATA_RIGHT_ROTATION_ID.getId(), Display.DATA_BILLBOARD_RENDER_CONSTRAINTS_ID.getId(), Display.DATA_BRIGHTNESS_OVERRIDE_ID.getId(), Display.DATA_SHADOW_RADIUS_ID.getId(), Display.DATA_SHADOW_STRENGTH_ID.getId()});
     private static final float INITIAL_SHADOW_RADIUS = 0.0F;
     private static final float INITIAL_SHADOW_STRENGTH = 1.0F;
     private static final int NO_GLOW_COLOR_OVERRIDE = -1;
@@ -93,35 +97,37 @@
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         super.onSyncedDataUpdated(data);
-        if (DATA_HEIGHT_ID.equals(data) || DATA_WIDTH_ID.equals(data)) {
+        if (Display.DATA_HEIGHT_ID.equals(data) || Display.DATA_WIDTH_ID.equals(data)) {
             this.updateCulling();
         }
 
-        if (DATA_INTERPOLATION_START_DELTA_TICKS_ID.equals(data)) {
+        if (Display.DATA_INTERPOLATION_START_DELTA_TICKS_ID.equals(data)) {
             this.updateStartTick = true;
         }
 
-        if (DATA_INTERPOLATION_DURATION_ID.equals(data)) {
+        if (Display.DATA_INTERPOLATION_DURATION_ID.equals(data)) {
             this.updateInterpolationDuration = true;
         }
 
-        if (RENDER_STATE_IDS.contains(data.getId())) {
+        if (Display.RENDER_STATE_IDS.contains(data.getId())) {
             this.updateRenderState = true;
         }
 
     }
 
     public static Transformation createTransformation(SynchedEntityData dataTracker) {
-        Vector3f vector3f = dataTracker.get(DATA_TRANSLATION_ID);
-        Quaternionf quaternionf = dataTracker.get(DATA_LEFT_ROTATION_ID);
-        Vector3f vector3f2 = dataTracker.get(DATA_SCALE_ID);
-        Quaternionf quaternionf2 = dataTracker.get(DATA_RIGHT_ROTATION_ID);
-        return new Transformation(vector3f, quaternionf, vector3f2, quaternionf2);
+        Vector3f vector3f = (Vector3f) dataTracker.get(Display.DATA_TRANSLATION_ID);
+        Quaternionf quaternionf = (Quaternionf) dataTracker.get(Display.DATA_LEFT_ROTATION_ID);
+        Vector3f vector3f1 = (Vector3f) dataTracker.get(Display.DATA_SCALE_ID);
+        Quaternionf quaternionf1 = (Quaternionf) dataTracker.get(Display.DATA_RIGHT_ROTATION_ID);
+
+        return new Transformation(vector3f, quaternionf, vector3f1, quaternionf1);
     }
 
     @Override
     public void tick() {
         Entity entity = this.getVehicle();
+
         if (entity != null && entity.isRemoved()) {
             this.stopRiding();
         }
@@ -130,7 +136,8 @@
             if (this.updateStartTick) {
                 this.updateStartTick = false;
                 int i = this.getInterpolationDelay();
-                this.interpolationStartClientTick = (long)(this.tickCount + i);
+
+                this.interpolationStartClientTick = (long) (this.tickCount + i);
             }
 
             if (this.updateInterpolationDuration) {
@@ -140,14 +147,15 @@
 
             if (this.updateRenderState) {
                 this.updateRenderState = false;
-                boolean bl = this.interpolationDuration != 0;
-                if (bl && this.renderState != null) {
+                boolean flag = this.interpolationDuration != 0;
+
+                if (flag && this.renderState != null) {
                     this.renderState = this.createInterpolatedRenderState(this.renderState, this.lastProgress);
                 } else {
                     this.renderState = this.createFreshRenderState();
                 }
 
-                this.updateRenderSubState(bl, this.lastProgress);
+                this.updateRenderSubState(flag, this.lastProgress);
             }
         }
 
@@ -157,43 +165,54 @@
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(DATA_INTERPOLATION_START_DELTA_TICKS_ID, 0);
-        this.entityData.define(DATA_INTERPOLATION_DURATION_ID, 0);
-        this.entityData.define(DATA_TRANSLATION_ID, new Vector3f());
-        this.entityData.define(DATA_SCALE_ID, new Vector3f(1.0F, 1.0F, 1.0F));
-        this.entityData.define(DATA_RIGHT_ROTATION_ID, new Quaternionf());
-        this.entityData.define(DATA_LEFT_ROTATION_ID, new Quaternionf());
-        this.entityData.define(DATA_BILLBOARD_RENDER_CONSTRAINTS_ID, Display.BillboardConstraints.FIXED.getId());
-        this.entityData.define(DATA_BRIGHTNESS_OVERRIDE_ID, -1);
-        this.entityData.define(DATA_VIEW_RANGE_ID, 1.0F);
-        this.entityData.define(DATA_SHADOW_RADIUS_ID, 0.0F);
-        this.entityData.define(DATA_SHADOW_STRENGTH_ID, 1.0F);
-        this.entityData.define(DATA_WIDTH_ID, 0.0F);
-        this.entityData.define(DATA_HEIGHT_ID, 0.0F);
-        this.entityData.define(DATA_GLOW_COLOR_OVERRIDE_ID, -1);
+        this.entityData.define(Display.DATA_INTERPOLATION_START_DELTA_TICKS_ID, 0);
+        this.entityData.define(Display.DATA_INTERPOLATION_DURATION_ID, 0);
+        this.entityData.define(Display.DATA_TRANSLATION_ID, new Vector3f());
+        this.entityData.define(Display.DATA_SCALE_ID, new Vector3f(1.0F, 1.0F, 1.0F));
+        this.entityData.define(Display.DATA_RIGHT_ROTATION_ID, new Quaternionf());
+        this.entityData.define(Display.DATA_LEFT_ROTATION_ID, new Quaternionf());
+        this.entityData.define(Display.DATA_BILLBOARD_RENDER_CONSTRAINTS_ID, Display.BillboardConstraints.FIXED.getId());
+        this.entityData.define(Display.DATA_BRIGHTNESS_OVERRIDE_ID, -1);
+        this.entityData.define(Display.DATA_VIEW_RANGE_ID, 1.0F);
+        this.entityData.define(Display.DATA_SHADOW_RADIUS_ID, 0.0F);
+        this.entityData.define(Display.DATA_SHADOW_STRENGTH_ID, 1.0F);
+        this.entityData.define(Display.DATA_WIDTH_ID, 0.0F);
+        this.entityData.define(Display.DATA_HEIGHT_ID, 0.0F);
+        this.entityData.define(Display.DATA_GLOW_COLOR_OVERRIDE_ID, -1);
     }
 
     @Override
     protected void readAdditionalSaveData(CompoundTag nbt) {
+        // DataResult dataresult; // CraftBukkit - decompile error
+        Logger logger;
+
         if (nbt.contains("transformation")) {
-            Transformation.EXTENDED_CODEC.decode(NbtOps.INSTANCE, nbt.get("transformation")).resultOrPartial(Util.prefix("Display entity", LOGGER::error)).ifPresent((pair) -> {
-                this.setTransformation(pair.getFirst());
+            DataResult<Pair<Transformation, net.minecraft.nbt.Tag>> dataresult = Transformation.EXTENDED_CODEC.decode(NbtOps.INSTANCE, nbt.get("transformation")); // CraftBukkit - decompile error
+            logger = Display.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+                this.setTransformation((Transformation) pair.getFirst());
             });
         }
 
+        int i;
+
         if (nbt.contains("interpolation_duration", 99)) {
-            int i = nbt.getInt("interpolation_duration");
+            i = nbt.getInt("interpolation_duration");
             this.setInterpolationDuration(i);
         }
 
         if (nbt.contains("start_interpolation", 99)) {
-            int j = nbt.getInt("start_interpolation");
-            this.setInterpolationDelay(j);
+            i = nbt.getInt("start_interpolation");
+            this.setInterpolationDelay(i);
         }
 
         if (nbt.contains("billboard", 8)) {
-            Display.BillboardConstraints.CODEC.decode(NbtOps.INSTANCE, nbt.get("billboard")).resultOrPartial(Util.prefix("Display entity", LOGGER::error)).ifPresent((pair) -> {
-                this.setBillboardConstraints(pair.getFirst());
+            DataResult<Pair<Display.BillboardConstraints, net.minecraft.nbt.Tag>> dataresult = Display.BillboardConstraints.CODEC.decode(NbtOps.INSTANCE, nbt.get("billboard")); // CraftBukkit - decompile error
+            logger = Display.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+                this.setBillboardConstraints((Display.BillboardConstraints) pair.getFirst());
             });
         }
 
@@ -222,29 +241,32 @@
         }
 
         if (nbt.contains("brightness", 10)) {
-            Brightness.CODEC.decode(NbtOps.INSTANCE, nbt.get("brightness")).resultOrPartial(Util.prefix("Display entity", LOGGER::error)).ifPresent((pair) -> {
-                this.setBrightnessOverride(pair.getFirst());
+            DataResult<Pair<Brightness, net.minecraft.nbt.Tag>> dataresult = Brightness.CODEC.decode(NbtOps.INSTANCE, nbt.get("brightness")); // CraftBukkit - decompile error
+            logger = Display.LOGGER;
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+                this.setBrightnessOverride((Brightness) pair.getFirst());
             });
         } else {
-            this.setBrightnessOverride((Brightness)null);
+            this.setBrightnessOverride((Brightness) null);
         }
 
     }
 
     public void setTransformation(Transformation transformation) {
-        this.entityData.set(DATA_TRANSLATION_ID, transformation.getTranslation());
-        this.entityData.set(DATA_LEFT_ROTATION_ID, transformation.getLeftRotation());
-        this.entityData.set(DATA_SCALE_ID, transformation.getScale());
-        this.entityData.set(DATA_RIGHT_ROTATION_ID, transformation.getRightRotation());
+        this.entityData.set(Display.DATA_TRANSLATION_ID, transformation.getTranslation());
+        this.entityData.set(Display.DATA_LEFT_ROTATION_ID, transformation.getLeftRotation());
+        this.entityData.set(Display.DATA_SCALE_ID, transformation.getScale());
+        this.entityData.set(Display.DATA_RIGHT_ROTATION_ID, transformation.getRightRotation());
     }
 
     @Override
     protected void addAdditionalSaveData(CompoundTag nbt) {
-        Transformation.EXTENDED_CODEC.encodeStart(NbtOps.INSTANCE, createTransformation(this.entityData)).result().ifPresent((transformations) -> {
-            nbt.put("transformation", transformations);
+        Transformation.EXTENDED_CODEC.encodeStart(NbtOps.INSTANCE, Display.createTransformation(this.entityData)).result().ifPresent((nbtbase) -> {
+            nbt.put("transformation", nbtbase);
         });
-        Display.BillboardConstraints.CODEC.encodeStart(NbtOps.INSTANCE, this.getBillboardConstraints()).result().ifPresent((billboard) -> {
-            nbt.put("billboard", billboard);
+        Display.BillboardConstraints.CODEC.encodeStart(NbtOps.INSTANCE, this.getBillboardConstraints()).result().ifPresent((nbtbase) -> {
+            nbt.put("billboard", nbtbase);
         });
         nbt.putInt("interpolation_duration", this.getInterpolationDuration());
         nbt.putFloat("view_range", this.getViewRange());
@@ -254,9 +276,10 @@
         nbt.putFloat("height", this.getHeight());
         nbt.putInt("glow_color_override", this.getGlowColorOverride());
         Brightness brightness = this.getBrightnessOverride();
+
         if (brightness != null) {
-            Brightness.CODEC.encodeStart(NbtOps.INSTANCE, brightness).result().ifPresent((brightnessx) -> {
-                nbt.put("brightness", brightnessx);
+            Brightness.CODEC.encodeStart(NbtOps.INSTANCE, brightness).result().ifPresent((nbtbase) -> {
+                nbt.put("brightness", nbtbase);
             });
         }
 
@@ -292,102 +315,105 @@
     }
 
     public void setInterpolationDuration(int interpolationDuration) {
-        this.entityData.set(DATA_INTERPOLATION_DURATION_ID, interpolationDuration);
+        this.entityData.set(Display.DATA_INTERPOLATION_DURATION_ID, interpolationDuration);
     }
 
     public int getInterpolationDuration() {
-        return this.entityData.get(DATA_INTERPOLATION_DURATION_ID);
+        return (Integer) this.entityData.get(Display.DATA_INTERPOLATION_DURATION_ID);
     }
 
     public void setInterpolationDelay(int startInterpolation) {
-        this.entityData.set(DATA_INTERPOLATION_START_DELTA_TICKS_ID, startInterpolation, true);
+        this.entityData.set(Display.DATA_INTERPOLATION_START_DELTA_TICKS_ID, startInterpolation, true);
     }
 
     public int getInterpolationDelay() {
-        return this.entityData.get(DATA_INTERPOLATION_START_DELTA_TICKS_ID);
+        return (Integer) this.entityData.get(Display.DATA_INTERPOLATION_START_DELTA_TICKS_ID);
     }
 
     public void setBillboardConstraints(Display.BillboardConstraints billboardMode) {
-        this.entityData.set(DATA_BILLBOARD_RENDER_CONSTRAINTS_ID, billboardMode.getId());
+        this.entityData.set(Display.DATA_BILLBOARD_RENDER_CONSTRAINTS_ID, billboardMode.getId());
     }
 
     public Display.BillboardConstraints getBillboardConstraints() {
-        return Display.BillboardConstraints.BY_ID.apply(this.entityData.get(DATA_BILLBOARD_RENDER_CONSTRAINTS_ID));
+        return (Display.BillboardConstraints) Display.BillboardConstraints.BY_ID.apply((Byte) this.entityData.get(Display.DATA_BILLBOARD_RENDER_CONSTRAINTS_ID));
     }
 
     public void setBrightnessOverride(@Nullable Brightness brightness) {
-        this.entityData.set(DATA_BRIGHTNESS_OVERRIDE_ID, brightness != null ? brightness.pack() : -1);
+        this.entityData.set(Display.DATA_BRIGHTNESS_OVERRIDE_ID, brightness != null ? brightness.pack() : -1);
     }
 
     @Nullable
     public Brightness getBrightnessOverride() {
-        int i = this.entityData.get(DATA_BRIGHTNESS_OVERRIDE_ID);
+        int i = (Integer) this.entityData.get(Display.DATA_BRIGHTNESS_OVERRIDE_ID);
+
         return i != -1 ? Brightness.unpack(i) : null;
     }
 
     private int getPackedBrightnessOverride() {
-        return this.entityData.get(DATA_BRIGHTNESS_OVERRIDE_ID);
+        return (Integer) this.entityData.get(Display.DATA_BRIGHTNESS_OVERRIDE_ID);
     }
 
     public void setViewRange(float viewRange) {
-        this.entityData.set(DATA_VIEW_RANGE_ID, viewRange);
+        this.entityData.set(Display.DATA_VIEW_RANGE_ID, viewRange);
     }
 
     public float getViewRange() {
-        return this.entityData.get(DATA_VIEW_RANGE_ID);
+        return (Float) this.entityData.get(Display.DATA_VIEW_RANGE_ID);
     }
 
     public void setShadowRadius(float shadowRadius) {
-        this.entityData.set(DATA_SHADOW_RADIUS_ID, shadowRadius);
+        this.entityData.set(Display.DATA_SHADOW_RADIUS_ID, shadowRadius);
     }
 
     public float getShadowRadius() {
-        return this.entityData.get(DATA_SHADOW_RADIUS_ID);
+        return (Float) this.entityData.get(Display.DATA_SHADOW_RADIUS_ID);
     }
 
     public void setShadowStrength(float shadowStrength) {
-        this.entityData.set(DATA_SHADOW_STRENGTH_ID, shadowStrength);
+        this.entityData.set(Display.DATA_SHADOW_STRENGTH_ID, shadowStrength);
     }
 
     public float getShadowStrength() {
-        return this.entityData.get(DATA_SHADOW_STRENGTH_ID);
+        return (Float) this.entityData.get(Display.DATA_SHADOW_STRENGTH_ID);
     }
 
     public void setWidth(float width) {
-        this.entityData.set(DATA_WIDTH_ID, width);
+        this.entityData.set(Display.DATA_WIDTH_ID, width);
     }
 
     public float getWidth() {
-        return this.entityData.get(DATA_WIDTH_ID);
+        return (Float) this.entityData.get(Display.DATA_WIDTH_ID);
     }
 
     public void setHeight(float height) {
-        this.entityData.set(DATA_HEIGHT_ID, height);
+        this.entityData.set(Display.DATA_HEIGHT_ID, height);
     }
 
     public int getGlowColorOverride() {
-        return this.entityData.get(DATA_GLOW_COLOR_OVERRIDE_ID);
+        return (Integer) this.entityData.get(Display.DATA_GLOW_COLOR_OVERRIDE_ID);
     }
 
     public void setGlowColorOverride(int glowColorOverride) {
-        this.entityData.set(DATA_GLOW_COLOR_OVERRIDE_ID, glowColorOverride);
+        this.entityData.set(Display.DATA_GLOW_COLOR_OVERRIDE_ID, glowColorOverride);
     }
 
     public float calculateInterpolationProgress(float delta) {
         int i = this.interpolationDuration;
+
         if (i <= 0) {
             return 1.0F;
         } else {
-            float f = (float)((long)this.tickCount - this.interpolationStartClientTick);
-            float g = f + delta;
-            float h = Mth.clamp(Mth.inverseLerp(g, 0.0F, (float)i), 0.0F, 1.0F);
-            this.lastProgress = h;
-            return h;
+            float f1 = (float) ((long) this.tickCount - this.interpolationStartClientTick);
+            float f2 = f1 + delta;
+            float f3 = Mth.clamp(Mth.inverseLerp(f2, 0.0F, (float) i), 0.0F, 1.0F);
+
+            this.lastProgress = f3;
+            return f3;
         }
     }
 
     public float getHeight() {
-        return this.entityData.get(DATA_HEIGHT_ID);
+        return (Float) this.entityData.get(Display.DATA_HEIGHT_ID);
     }
 
     @Override
@@ -398,14 +424,16 @@
 
     private void updateCulling() {
         float f = this.getWidth();
-        float g = this.getHeight();
-        if (f != 0.0F && g != 0.0F) {
+        float f1 = this.getHeight();
+
+        if (f != 0.0F && f1 != 0.0F) {
             this.noCulling = false;
-            float h = f / 2.0F;
-            double d = this.getX();
-            double e = this.getY();
-            double i = this.getZ();
-            this.cullingBoundingBox = new AABB(d - (double)h, e, i - (double)h, d + (double)h, e + (double)g, i + (double)h);
+            float f2 = f / 2.0F;
+            double d0 = this.getX();
+            double d1 = this.getY();
+            double d2 = this.getZ();
+
+            this.cullingBoundingBox = new AABB(d0 - (double) f2, d1, d2 - (double) f2, d0 + (double) f2, d1 + (double) f1, d2 + (double) f2);
         } else {
             this.noCulling = true;
         }
@@ -425,45 +453,49 @@
     }
 
     private void updateOrientation() {
-        this.orientation.rotationYXZ(-0.017453292F * this.getYRot(), ((float)Math.PI / 180F) * this.getXRot(), 0.0F);
+        this.orientation.rotationYXZ(-0.017453292F * this.getYRot(), 0.017453292F * this.getXRot(), 0.0F);
     }
 
     @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
-        return distance < Mth.square((double)this.getViewRange() * 64.0D * getViewScale());
+        return distance < Mth.square((double) this.getViewRange() * 64.0D * getViewScale());
     }
 
     @Override
     public int getTeamColor() {
         int i = this.getGlowColorOverride();
+
         return i != -1 ? i : super.getTeamColor();
     }
 
     private Display.RenderState createFreshRenderState() {
-        return new Display.RenderState(Display.GenericInterpolator.constant(createTransformation(this.entityData)), this.getBillboardConstraints(), this.getPackedBrightnessOverride(), Display.FloatInterpolator.constant(this.getShadowRadius()), Display.FloatInterpolator.constant(this.getShadowStrength()), this.getGlowColorOverride());
+        return new Display.RenderState(Display.GenericInterpolator.constant(Display.createTransformation(this.entityData)), this.getBillboardConstraints(), this.getPackedBrightnessOverride(), Display.FloatInterpolator.constant(this.getShadowRadius()), Display.FloatInterpolator.constant(this.getShadowStrength()), this.getGlowColorOverride());
     }
 
     private Display.RenderState createInterpolatedRenderState(Display.RenderState state, float lerpProgress) {
-        Transformation transformation = state.transformation.get(lerpProgress);
-        float f = state.shadowRadius.get(lerpProgress);
-        float g = state.shadowStrength.get(lerpProgress);
-        return new Display.RenderState(new Display.TransformationInterpolator(transformation, createTransformation(this.entityData)), this.getBillboardConstraints(), this.getPackedBrightnessOverride(), new Display.LinearFloatInterpolator(f, this.getShadowRadius()), new Display.LinearFloatInterpolator(g, this.getShadowStrength()), this.getGlowColorOverride());
+        Transformation transformation = (Transformation) state.transformation.get(lerpProgress);
+        float f1 = state.shadowRadius.get(lerpProgress);
+        float f2 = state.shadowStrength.get(lerpProgress);
+
+        return new Display.RenderState(new Display.TransformationInterpolator(transformation, Display.createTransformation(this.entityData)), this.getBillboardConstraints(), this.getPackedBrightnessOverride(), new Display.LinearFloatInterpolator(f1, this.getShadowRadius()), new Display.LinearFloatInterpolator(f2, this.getShadowStrength()), this.getGlowColorOverride());
+    }
+
+    public static record RenderState(Display.GenericInterpolator<Transformation> transformation, Display.BillboardConstraints billboardConstraints, int brightnessOverride, Display.FloatInterpolator shadowRadius, Display.FloatInterpolator shadowStrength, int glowColorOverride) {
+
     }
 
     public static enum BillboardConstraints implements StringRepresentable {
-        FIXED((byte)0, "fixed"),
-        VERTICAL((byte)1, "vertical"),
-        HORIZONTAL((byte)2, "horizontal"),
-        CENTER((byte)3, "center");
+
+        FIXED((byte) 0, "fixed"), VERTICAL((byte) 1, "vertical"), HORIZONTAL((byte) 2, "horizontal"), CENTER((byte) 3, "center");
 
         public static final Codec<Display.BillboardConstraints> CODEC = StringRepresentable.fromEnum(Display.BillboardConstraints::values);
         public static final IntFunction<Display.BillboardConstraints> BY_ID = ByIdMap.continuous(Display.BillboardConstraints::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
         private final byte id;
         private final String name;
 
-        private BillboardConstraints(byte index, String name) {
-            this.name = name;
-            this.id = index;
+        private BillboardConstraints(byte b0, String s) {
+            this.name = s;
+            this.id = b0;
         }
 
         @Override
@@ -476,87 +508,11 @@
         }
     }
 
-    public static class BlockDisplay extends Display {
-        public static final String TAG_BLOCK_STATE = "block_state";
-        private static final EntityDataAccessor<BlockState> DATA_BLOCK_STATE_ID = SynchedEntityData.defineId(Display.BlockDisplay.class, EntityDataSerializers.BLOCK_STATE);
-        @Nullable
-        private Display.BlockDisplay.BlockRenderState blockRenderState;
-
-        public BlockDisplay(EntityType<?> type, Level world) {
-            super(type, world);
-        }
-
-        @Override
-        protected void defineSynchedData() {
-            super.defineSynchedData();
-            this.entityData.define(DATA_BLOCK_STATE_ID, Blocks.AIR.defaultBlockState());
-        }
-
-        @Override
-        public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
-            super.onSyncedDataUpdated(data);
-            if (data.equals(DATA_BLOCK_STATE_ID)) {
-                this.updateRenderState = true;
-            }
-
-        }
-
-        public BlockState getBlockState() {
-            return this.entityData.get(DATA_BLOCK_STATE_ID);
-        }
-
-        public void setBlockState(BlockState state) {
-            this.entityData.set(DATA_BLOCK_STATE_ID, state);
-        }
-
-        @Override
-        protected void readAdditionalSaveData(CompoundTag nbt) {
-            super.readAdditionalSaveData(nbt);
-            this.setBlockState(NbtUtils.readBlockState(this.level().holderLookup(Registries.BLOCK), nbt.getCompound("block_state")));
-        }
-
-        @Override
-        protected void addAdditionalSaveData(CompoundTag nbt) {
-            super.addAdditionalSaveData(nbt);
-            nbt.put("block_state", NbtUtils.writeBlockState(this.getBlockState()));
-        }
-
-        @Nullable
-        public Display.BlockDisplay.BlockRenderState blockRenderState() {
-            return this.blockRenderState;
-        }
-
-        @Override
-        protected void updateRenderSubState(boolean shouldLerp, float lerpProgress) {
-            this.blockRenderState = new Display.BlockDisplay.BlockRenderState(this.getBlockState());
-        }
-
-        public static record BlockRenderState(BlockState blockState) {
-        }
-    }
-
-    static record ColorInterpolator(int previous, int current) implements Display.IntInterpolator {
-        @Override
-        public int get(float delta) {
-            return FastColor.ARGB32.lerp(delta, this.previous, this.current);
-        }
-    }
-
-    @FunctionalInterface
-    public interface FloatInterpolator {
-        static Display.FloatInterpolator constant(float value) {
-            return (delta) -> {
-                return value;
-            };
-        }
-
-        float get(float delta);
-    }
-
     @FunctionalInterface
     public interface GenericInterpolator<T> {
+
         static <T> Display.GenericInterpolator<T> constant(T value) {
-            return (delta) -> {
+            return (f) -> {
                 return value;
             };
         }
@@ -565,130 +521,63 @@
     }
 
     @FunctionalInterface
-    public interface IntInterpolator {
-        static Display.IntInterpolator constant(int value) {
-            return (delta) -> {
+    public interface FloatInterpolator {
+
+        static Display.FloatInterpolator constant(float value) {
+            return (f1) -> {
                 return value;
             };
         }
 
-        int get(float delta);
+        float get(float delta);
     }
 
-    public static class ItemDisplay extends Display {
-        private static final String TAG_ITEM = "item";
-        private static final String TAG_ITEM_DISPLAY = "item_display";
-        private static final EntityDataAccessor<ItemStack> DATA_ITEM_STACK_ID = SynchedEntityData.defineId(Display.ItemDisplay.class, EntityDataSerializers.ITEM_STACK);
-        private static final EntityDataAccessor<Byte> DATA_ITEM_DISPLAY_ID = SynchedEntityData.defineId(Display.ItemDisplay.class, EntityDataSerializers.BYTE);
-        private final SlotAccess slot = new SlotAccess() {
-            @Override
-            public ItemStack get() {
-                return ItemDisplay.this.getItemStack();
-            }
-
-            @Override
-            public boolean set(ItemStack stack) {
-                ItemDisplay.this.setItemStack(stack);
-                return true;
-            }
-        };
-        @Nullable
-        private Display.ItemDisplay.ItemRenderState itemRenderState;
-
-        public ItemDisplay(EntityType<?> type, Level world) {
-            super(type, world);
-        }
-
-        @Override
-        protected void defineSynchedData() {
-            super.defineSynchedData();
-            this.entityData.define(DATA_ITEM_STACK_ID, ItemStack.EMPTY);
-            this.entityData.define(DATA_ITEM_DISPLAY_ID, ItemDisplayContext.NONE.getId());
-        }
-
-        @Override
-        public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
-            super.onSyncedDataUpdated(data);
-            if (DATA_ITEM_STACK_ID.equals(data) || DATA_ITEM_DISPLAY_ID.equals(data)) {
-                this.updateRenderState = true;
-            }
-
-        }
-
-        public ItemStack getItemStack() {
-            return this.entityData.get(DATA_ITEM_STACK_ID);
-        }
-
-        public void setItemStack(ItemStack stack) {
-            this.entityData.set(DATA_ITEM_STACK_ID, stack);
-        }
-
-        public void setItemTransform(ItemDisplayContext transformationMode) {
-            this.entityData.set(DATA_ITEM_DISPLAY_ID, transformationMode.getId());
-        }
-
-        public ItemDisplayContext getItemTransform() {
-            return ItemDisplayContext.BY_ID.apply(this.entityData.get(DATA_ITEM_DISPLAY_ID));
-        }
+    private static record TransformationInterpolator(Transformation previous, Transformation current) implements Display.GenericInterpolator<Transformation> {
 
         @Override
-        protected void readAdditionalSaveData(CompoundTag nbt) {
-            super.readAdditionalSaveData(nbt);
-            this.setItemStack(ItemStack.of(nbt.getCompound("item")));
-            if (nbt.contains("item_display", 8)) {
-                ItemDisplayContext.CODEC.decode(NbtOps.INSTANCE, nbt.get("item_display")).resultOrPartial(Util.prefix("Display entity", Display.LOGGER::error)).ifPresent((mode) -> {
-                    this.setItemTransform(mode.getFirst());
-                });
-            }
-
+        public Transformation get(float delta) {
+            return (double) delta >= 1.0D ? this.current : this.previous.slerp(this.current, delta);
         }
+    }
 
-        @Override
-        protected void addAdditionalSaveData(CompoundTag nbt) {
-            super.addAdditionalSaveData(nbt);
-            nbt.put("item", this.getItemStack().save(new CompoundTag()));
-            ItemDisplayContext.CODEC.encodeStart(NbtOps.INSTANCE, this.getItemTransform()).result().ifPresent((nbtx) -> {
-                nbt.put("item_display", nbtx);
-            });
-        }
+    private static record LinearFloatInterpolator(float previous, float current) implements Display.FloatInterpolator {
 
         @Override
-        public SlotAccess getSlot(int mappedIndex) {
-            return mappedIndex == 0 ? this.slot : SlotAccess.NULL;
+        public float get(float delta) {
+            return Mth.lerp(delta, this.previous, this.current);
         }
+    }
 
-        @Nullable
-        public Display.ItemDisplay.ItemRenderState itemRenderState() {
-            return this.itemRenderState;
-        }
+    private static record ColorInterpolator(int previous, int current) implements Display.IntInterpolator {
 
         @Override
-        protected void updateRenderSubState(boolean shouldLerp, float lerpProgress) {
-            this.itemRenderState = new Display.ItemDisplay.ItemRenderState(this.getItemStack(), this.getItemTransform());
-        }
-
-        public static record ItemRenderState(ItemStack itemStack, ItemDisplayContext itemTransform) {
+        public int get(float delta) {
+            return FastColor.ARGB32.lerp(delta, this.previous, this.current);
         }
     }
 
-    static record LinearFloatInterpolator(float previous, float current) implements Display.FloatInterpolator {
-        @Override
-        public float get(float delta) {
-            return Mth.lerp(delta, this.previous, this.current);
-        }
-    }
+    private static record LinearIntInterpolator(int previous, int current) implements Display.IntInterpolator {
 
-    static record LinearIntInterpolator(int previous, int current) implements Display.IntInterpolator {
         @Override
         public int get(float delta) {
             return Mth.lerpInt(delta, this.previous, this.current);
         }
     }
 
-    public static record RenderState(Display.GenericInterpolator<Transformation> transformation, Display.BillboardConstraints billboardConstraints, int brightnessOverride, Display.FloatInterpolator shadowRadius, Display.FloatInterpolator shadowStrength, int glowColorOverride) {
+    @FunctionalInterface
+    public interface IntInterpolator {
+
+        static Display.IntInterpolator constant(int value) {
+            return (f) -> {
+                return value;
+            };
+        }
+
+        int get(float delta);
     }
 
     public static class TextDisplay extends Display {
+
         public static final String TAG_TEXT = "text";
         private static final String TAG_LINE_WIDTH = "line_width";
         private static final String TAG_TEXT_OPACITY = "text_opacity";
@@ -705,11 +594,11 @@
         private static final byte INITIAL_TEXT_OPACITY = -1;
         public static final int INITIAL_BACKGROUND = 1073741824;
         private static final EntityDataAccessor<Component> DATA_TEXT_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.COMPONENT);
-        private static final EntityDataAccessor<Integer> DATA_LINE_WIDTH_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.INT);
-        private static final EntityDataAccessor<Integer> DATA_BACKGROUND_COLOR_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.INT);
+        public static final EntityDataAccessor<Integer> DATA_LINE_WIDTH_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.INT);
+        public static final EntityDataAccessor<Integer> DATA_BACKGROUND_COLOR_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.INT);
         private static final EntityDataAccessor<Byte> DATA_TEXT_OPACITY_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.BYTE);
         private static final EntityDataAccessor<Byte> DATA_STYLE_FLAGS_ID = SynchedEntityData.defineId(Display.TextDisplay.class, EntityDataSerializers.BYTE);
-        private static final IntSet TEXT_RENDER_STATE_IDS = IntSet.of(DATA_TEXT_ID.getId(), DATA_LINE_WIDTH_ID.getId(), DATA_BACKGROUND_COLOR_ID.getId(), DATA_TEXT_OPACITY_ID.getId(), DATA_STYLE_FLAGS_ID.getId());
+        private static final IntSet TEXT_RENDER_STATE_IDS = IntSet.of(new int[]{Display.TextDisplay.DATA_TEXT_ID.getId(), Display.TextDisplay.DATA_LINE_WIDTH_ID.getId(), Display.TextDisplay.DATA_BACKGROUND_COLOR_ID.getId(), Display.TextDisplay.DATA_TEXT_OPACITY_ID.getId(), Display.TextDisplay.DATA_STYLE_FLAGS_ID.getId()});
         @Nullable
         private Display.TextDisplay.CachedInfo clientDisplayCache;
         @Nullable
@@ -722,64 +611,64 @@
         @Override
         protected void defineSynchedData() {
             super.defineSynchedData();
-            this.entityData.define(DATA_TEXT_ID, Component.empty());
-            this.entityData.define(DATA_LINE_WIDTH_ID, 200);
-            this.entityData.define(DATA_BACKGROUND_COLOR_ID, 1073741824);
-            this.entityData.define(DATA_TEXT_OPACITY_ID, (byte)-1);
-            this.entityData.define(DATA_STYLE_FLAGS_ID, (byte)0);
+            this.entityData.define(Display.TextDisplay.DATA_TEXT_ID, Component.empty());
+            this.entityData.define(Display.TextDisplay.DATA_LINE_WIDTH_ID, 200);
+            this.entityData.define(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, 1073741824);
+            this.entityData.define(Display.TextDisplay.DATA_TEXT_OPACITY_ID, (byte) -1); // CraftBukkit - decompile error
+            this.entityData.define(Display.TextDisplay.DATA_STYLE_FLAGS_ID, (byte) 0);
         }
 
         @Override
         public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
             super.onSyncedDataUpdated(data);
-            if (TEXT_RENDER_STATE_IDS.contains(data.getId())) {
+            if (Display.TextDisplay.TEXT_RENDER_STATE_IDS.contains(data.getId())) {
                 this.updateRenderState = true;
             }
 
         }
 
         public Component getText() {
-            return this.entityData.get(DATA_TEXT_ID);
+            return (Component) this.entityData.get(Display.TextDisplay.DATA_TEXT_ID);
         }
 
         public void setText(Component text) {
-            this.entityData.set(DATA_TEXT_ID, text);
+            this.entityData.set(Display.TextDisplay.DATA_TEXT_ID, text);
         }
 
         public int getLineWidth() {
-            return this.entityData.get(DATA_LINE_WIDTH_ID);
+            return (Integer) this.entityData.get(Display.TextDisplay.DATA_LINE_WIDTH_ID);
         }
 
-        public void setLineWidth(int lineWidth) {
-            this.entityData.set(DATA_LINE_WIDTH_ID, lineWidth);
+        private void setLineWidth(int lineWidth) {
+            this.entityData.set(Display.TextDisplay.DATA_LINE_WIDTH_ID, lineWidth);
         }
 
         public byte getTextOpacity() {
-            return this.entityData.get(DATA_TEXT_OPACITY_ID);
+            return (Byte) this.entityData.get(Display.TextDisplay.DATA_TEXT_OPACITY_ID);
         }
 
         public void setTextOpacity(byte textOpacity) {
-            this.entityData.set(DATA_TEXT_OPACITY_ID, textOpacity);
+            this.entityData.set(Display.TextDisplay.DATA_TEXT_OPACITY_ID, textOpacity);
         }
 
         public int getBackgroundColor() {
-            return this.entityData.get(DATA_BACKGROUND_COLOR_ID);
+            return (Integer) this.entityData.get(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID);
         }
 
-        public void setBackgroundColor(int background) {
-            this.entityData.set(DATA_BACKGROUND_COLOR_ID, background);
+        private void setBackgroundColor(int background) {
+            this.entityData.set(Display.TextDisplay.DATA_BACKGROUND_COLOR_ID, background);
         }
 
         public byte getFlags() {
-            return this.entityData.get(DATA_STYLE_FLAGS_ID);
+            return (Byte) this.entityData.get(Display.TextDisplay.DATA_STYLE_FLAGS_ID);
         }
 
         public void setFlags(byte flags) {
-            this.entityData.set(DATA_STYLE_FLAGS_ID, flags);
+            this.entityData.set(Display.TextDisplay.DATA_STYLE_FLAGS_ID, flags);
         }
 
         private static byte loadFlag(byte flags, CompoundTag nbt, String nbtKey, byte flag) {
-            return nbt.getBoolean(nbtKey) ? (byte)(flags | flag) : flags;
+            return nbt.getBoolean(nbtKey) ? (byte) (flags | flag) : flags;
         }
 
         @Override
@@ -797,44 +686,53 @@
                 this.setBackgroundColor(nbt.getInt("background"));
             }
 
-            byte b = loadFlag((byte)0, nbt, "shadow", (byte)1);
-            b = loadFlag(b, nbt, "see_through", (byte)2);
-            b = loadFlag(b, nbt, "default_background", (byte)4);
-            Optional<Display.TextDisplay.Align> optional = Display.TextDisplay.Align.CODEC.decode(NbtOps.INSTANCE, nbt.get("alignment")).resultOrPartial(Util.prefix("Display entity", Display.LOGGER::error)).map(Pair::getFirst);
+            byte b0 = TextDisplay.loadFlag((byte) 0, nbt, "shadow", (byte) 1);
+
+            b0 = TextDisplay.loadFlag(b0, nbt, "see_through", (byte) 2);
+            b0 = TextDisplay.loadFlag(b0, nbt, "default_background", (byte) 4);
+            DataResult<Pair<Display.TextDisplay.Align, net.minecraft.nbt.Tag>> dataresult = Display.TextDisplay.Align.CODEC.decode(NbtOps.INSTANCE, nbt.get("alignment")); // CraftBukkit - decompile error
+            Logger logger = Display.LOGGER;
+
+            Objects.requireNonNull(logger);
+            Optional<Display.TextDisplay.Align> optional = dataresult.result().map(Pair::getFirst); // Paper - hide error message
+
             if (optional.isPresent()) {
-                byte var10000;
-                switch ((Display.TextDisplay.Align)optional.get()) {
+                byte b1;
+
+                switch ((Display.TextDisplay.Align) optional.get()) {
                     case CENTER:
-                        var10000 = b;
+                        b1 = b0;
                         break;
                     case LEFT:
-                        var10000 = (byte)(b | 8);
+                        b1 = (byte) (b0 | 8);
                         break;
                     case RIGHT:
-                        var10000 = (byte)(b | 16);
+                        b1 = (byte) (b0 | 16);
                         break;
                     default:
                         throw new IncompatibleClassChangeError();
                 }
 
-                b = var10000;
+                b0 = b1;
             }
 
-            this.setFlags(b);
+            this.setFlags(b0);
             if (nbt.contains("text", 8)) {
-                String string = nbt.getString("text");
+                String s = nbt.getString("text");
 
                 try {
-                    Component component = Component.Serializer.fromJson(string);
-                    if (component != null) {
-                        CommandSourceStack commandSourceStack = this.createCommandSourceStack().withPermission(2);
-                        Component component2 = ComponentUtils.updateForEntity(commandSourceStack, component, this, 0);
-                        this.setText(component2);
+                    MutableComponent ichatmutablecomponent = Component.Serializer.fromJson(s);
+
+                    if (ichatmutablecomponent != null) {
+                        CommandSourceStack commandlistenerwrapper = this.createCommandSourceStack().withPermission(2);
+                        MutableComponent ichatmutablecomponent1 = ComponentUtils.updateForEntity(commandlistenerwrapper, (Component) ichatmutablecomponent, this, 0);
+
+                        this.setText(ichatmutablecomponent1);
                     } else {
                         this.setText(Component.empty());
                     }
-                } catch (Exception var8) {
-                    Display.LOGGER.warn("Failed to parse display entity text {}", string, var8);
+                } catch (Exception exception) {
+                    Display.LOGGER.warn("Failed to parse display entity text {}", s, exception);
                 }
             }
 
@@ -851,12 +749,13 @@
             nbt.putInt("line_width", this.getLineWidth());
             nbt.putInt("background", this.getBackgroundColor());
             nbt.putByte("text_opacity", this.getTextOpacity());
-            byte b = this.getFlags();
-            storeFlag(b, nbt, "shadow", (byte)1);
-            storeFlag(b, nbt, "see_through", (byte)2);
-            storeFlag(b, nbt, "default_background", (byte)4);
-            Display.TextDisplay.Align.CODEC.encodeStart(NbtOps.INSTANCE, getAlign(b)).result().ifPresent((tag) -> {
-                nbt.put("alignment", tag);
+            byte b0 = this.getFlags();
+
+            TextDisplay.storeFlag(b0, nbt, "shadow", (byte) 1);
+            TextDisplay.storeFlag(b0, nbt, "see_through", (byte) 2);
+            TextDisplay.storeFlag(b0, nbt, "default_background", (byte) 4);
+            Display.TextDisplay.Align.CODEC.encodeStart(NbtOps.INSTANCE, TextDisplay.getAlign(b0)).result().ifPresent((nbtbase) -> {
+                nbt.put("alignment", nbtbase);
             });
         }
 
@@ -883,6 +782,7 @@
         private Display.TextDisplay.TextRenderState createInterpolatedTextRenderState(Display.TextDisplay.TextRenderState data, float lerpProgress) {
             int i = data.backgroundColor.get(lerpProgress);
             int j = data.textOpacity.get(lerpProgress);
+
             return new Display.TextDisplay.TextRenderState(this.getText(), this.getLineWidth(), new Display.LinearIntInterpolator(j, this.getTextOpacity()), new Display.ColorInterpolator(i, this.getBackgroundColor()), this.getFlags());
         }
 
@@ -899,23 +799,18 @@
         }
 
         public static Display.TextDisplay.Align getAlign(byte flags) {
-            if ((flags & 8) != 0) {
-                return Display.TextDisplay.Align.LEFT;
-            } else {
-                return (flags & 16) != 0 ? Display.TextDisplay.Align.RIGHT : Display.TextDisplay.Align.CENTER;
-            }
+            return (flags & 8) != 0 ? Display.TextDisplay.Align.LEFT : ((flags & 16) != 0 ? Display.TextDisplay.Align.RIGHT : Display.TextDisplay.Align.CENTER);
         }
 
         public static enum Align implements StringRepresentable {
-            CENTER("center"),
-            LEFT("left"),
-            RIGHT("right");
+
+            CENTER("center"), LEFT("left"), RIGHT("right");
 
             public static final Codec<Display.TextDisplay.Align> CODEC = StringRepresentable.fromEnum(Display.TextDisplay.Align::values);
             private final String name;
 
-            private Align(String name) {
-                this.name = name;
+            private Align(String s) {
+                this.name = s;
             }
 
             @Override
@@ -924,25 +819,185 @@
             }
         }
 
-        public static record CachedInfo(List<Display.TextDisplay.CachedLine> lines, int width) {
+        public static record TextRenderState(Component text, int lineWidth, Display.IntInterpolator textOpacity, Display.IntInterpolator backgroundColor, byte flags) {
+
         }
 
-        public static record CachedLine(FormattedCharSequence contents, int width) {
+        public static record CachedInfo(List<Display.TextDisplay.CachedLine> lines, int width) {
+
         }
 
         @FunctionalInterface
         public interface LineSplitter {
+
             Display.TextDisplay.CachedInfo split(Component text, int lineWidth);
         }
 
-        public static record TextRenderState(Component text, int lineWidth, Display.IntInterpolator textOpacity, Display.IntInterpolator backgroundColor, byte flags) {
+        public static record CachedLine(FormattedCharSequence contents, int width) {
+
         }
     }
 
-    static record TransformationInterpolator(Transformation previous, Transformation current) implements Display.GenericInterpolator<Transformation> {
+    public static class BlockDisplay extends Display {
+
+        public static final String TAG_BLOCK_STATE = "block_state";
+        private static final EntityDataAccessor<BlockState> DATA_BLOCK_STATE_ID = SynchedEntityData.defineId(Display.BlockDisplay.class, EntityDataSerializers.BLOCK_STATE);
+        @Nullable
+        private Display.BlockDisplay.BlockRenderState blockRenderState;
+
+        public BlockDisplay(EntityType<?> type, Level world) {
+            super(type, world);
+        }
+
         @Override
-        public Transformation get(float f) {
-            return (double)f >= 1.0D ? this.current : this.previous.slerp(this.current, f);
+        protected void defineSynchedData() {
+            super.defineSynchedData();
+            this.entityData.define(Display.BlockDisplay.DATA_BLOCK_STATE_ID, Blocks.AIR.defaultBlockState());
+        }
+
+        @Override
+        public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
+            super.onSyncedDataUpdated(data);
+            if (data.equals(Display.BlockDisplay.DATA_BLOCK_STATE_ID)) {
+                this.updateRenderState = true;
+            }
+
+        }
+
+        public BlockState getBlockState() {
+            return (BlockState) this.entityData.get(Display.BlockDisplay.DATA_BLOCK_STATE_ID);
+        }
+
+        public void setBlockState(BlockState state) {
+            this.entityData.set(Display.BlockDisplay.DATA_BLOCK_STATE_ID, state);
+        }
+
+        @Override
+        protected void readAdditionalSaveData(CompoundTag nbt) {
+            super.readAdditionalSaveData(nbt);
+            this.setBlockState(NbtUtils.readBlockState(this.level().holderLookup(Registries.BLOCK), nbt.getCompound("block_state")));
+        }
+
+        @Override
+        protected void addAdditionalSaveData(CompoundTag nbt) {
+            super.addAdditionalSaveData(nbt);
+            nbt.put("block_state", NbtUtils.writeBlockState(this.getBlockState()));
+        }
+
+        @Nullable
+        public Display.BlockDisplay.BlockRenderState blockRenderState() {
+            return this.blockRenderState;
+        }
+
+        @Override
+        protected void updateRenderSubState(boolean shouldLerp, float lerpProgress) {
+            this.blockRenderState = new Display.BlockDisplay.BlockRenderState(this.getBlockState());
+        }
+
+        public static record BlockRenderState(BlockState blockState) {
+
+        }
+    }
+
+    public static class ItemDisplay extends Display {
+
+        private static final String TAG_ITEM = "item";
+        private static final String TAG_ITEM_DISPLAY = "item_display";
+        private static final EntityDataAccessor<ItemStack> DATA_ITEM_STACK_ID = SynchedEntityData.defineId(Display.ItemDisplay.class, EntityDataSerializers.ITEM_STACK);
+        private static final EntityDataAccessor<Byte> DATA_ITEM_DISPLAY_ID = SynchedEntityData.defineId(Display.ItemDisplay.class, EntityDataSerializers.BYTE);
+        private final SlotAccess slot = new SlotAccess() {
+            @Override
+            public ItemStack get() {
+                return ItemDisplay.this.getItemStack();
+            }
+
+            @Override
+            public boolean set(ItemStack stack) {
+                ItemDisplay.this.setItemStack(stack);
+                return true;
+            }
+        };
+        @Nullable
+        private Display.ItemDisplay.ItemRenderState itemRenderState;
+
+        public ItemDisplay(EntityType<?> type, Level world) {
+            super(type, world);
+        }
+
+        @Override
+        protected void defineSynchedData() {
+            super.defineSynchedData();
+            this.entityData.define(Display.ItemDisplay.DATA_ITEM_STACK_ID, ItemStack.EMPTY);
+            this.entityData.define(Display.ItemDisplay.DATA_ITEM_DISPLAY_ID, ItemDisplayContext.NONE.getId());
+        }
+
+        @Override
+        public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
+            super.onSyncedDataUpdated(data);
+            if (Display.ItemDisplay.DATA_ITEM_STACK_ID.equals(data) || Display.ItemDisplay.DATA_ITEM_DISPLAY_ID.equals(data)) {
+                this.updateRenderState = true;
+            }
+
+        }
+
+        public ItemStack getItemStack() {
+            return (ItemStack) this.entityData.get(Display.ItemDisplay.DATA_ITEM_STACK_ID);
+        }
+
+        public void setItemStack(ItemStack stack) {
+            this.entityData.set(Display.ItemDisplay.DATA_ITEM_STACK_ID, stack);
+        }
+
+        public void setItemTransform(ItemDisplayContext transformationMode) {
+            this.entityData.set(Display.ItemDisplay.DATA_ITEM_DISPLAY_ID, transformationMode.getId());
+        }
+
+        public ItemDisplayContext getItemTransform() {
+            return (ItemDisplayContext) ItemDisplayContext.BY_ID.apply((Byte) this.entityData.get(Display.ItemDisplay.DATA_ITEM_DISPLAY_ID));
+        }
+
+        @Override
+        protected void readAdditionalSaveData(CompoundTag nbt) {
+            super.readAdditionalSaveData(nbt);
+            this.setItemStack(ItemStack.of(nbt.getCompound("item")));
+            if (nbt.contains("item_display", 8)) {
+                DataResult<Pair<ItemDisplayContext, net.minecraft.nbt.Tag>>  dataresult = ItemDisplayContext.CODEC.decode(NbtOps.INSTANCE, nbt.get("item_display")); // CraftBukkit - decompile error
+                Logger logger = Display.LOGGER;
+
+                Objects.requireNonNull(logger);
+                dataresult.resultOrPartial(Util.prefix("Display entity", logger::error)).ifPresent((pair) -> {
+                    this.setItemTransform((ItemDisplayContext) pair.getFirst());
+                });
+            }
+
+        }
+
+        @Override
+        protected void addAdditionalSaveData(CompoundTag nbt) {
+            super.addAdditionalSaveData(nbt);
+            nbt.put("item", this.getItemStack().save(new CompoundTag()));
+            ItemDisplayContext.CODEC.encodeStart(NbtOps.INSTANCE, this.getItemTransform()).result().ifPresent((nbtbase) -> {
+                nbt.put("item_display", nbtbase);
+            });
+        }
+
+        @Override
+        public SlotAccess getSlot(int mappedIndex) {
+            return mappedIndex == 0 ? this.slot : SlotAccess.NULL;
+        }
+
+        @Nullable
+        public Display.ItemDisplay.ItemRenderState itemRenderState() {
+            return this.itemRenderState;
+        }
+
+        @Override
+        protected void updateRenderSubState(boolean shouldLerp, float lerpProgress) {
+            this.itemRenderState = new Display.ItemDisplay.ItemRenderState(this.getItemStack(), this.getItemTransform());
+        }
+
+        public static record ItemRenderState(ItemStack itemStack, ItemDisplayContext itemTransform) {
+
         }
     }
 }
