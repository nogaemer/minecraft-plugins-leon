--- a/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
+++ b/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.block;
 
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -12,6 +14,7 @@
 import net.minecraft.world.Containers;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -24,6 +27,7 @@
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec2;
@@ -31,19 +35,22 @@
 import org.jetbrains.annotations.Nullable;
 
 public class ChiseledBookShelfBlock extends BaseEntityBlock {
+
     private static final int MAX_BOOKS_IN_STORAGE = 6;
     public static final int BOOKS_PER_ROW = 3;
     public static final List<BooleanProperty> SLOT_OCCUPIED_PROPERTIES = List.of(BlockStateProperties.CHISELED_BOOKSHELF_SLOT_0_OCCUPIED, BlockStateProperties.CHISELED_BOOKSHELF_SLOT_1_OCCUPIED, BlockStateProperties.CHISELED_BOOKSHELF_SLOT_2_OCCUPIED, BlockStateProperties.CHISELED_BOOKSHELF_SLOT_3_OCCUPIED, BlockStateProperties.CHISELED_BOOKSHELF_SLOT_4_OCCUPIED, BlockStateProperties.CHISELED_BOOKSHELF_SLOT_5_OCCUPIED);
 
     public ChiseledBookShelfBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        BlockState blockState = this.stateDefinition.any().setValue(HorizontalDirectionalBlock.FACING, Direction.NORTH);
+        BlockState iblockdata = (BlockState) ((BlockState) this.stateDefinition.any()).setValue(HorizontalDirectionalBlock.FACING, Direction.NORTH);
 
-        for(BooleanProperty booleanProperty : SLOT_OCCUPIED_PROPERTIES) {
-            blockState = blockState.setValue(booleanProperty, Boolean.valueOf(false));
+        BooleanProperty blockstateboolean;
+
+        for (Iterator iterator = ChiseledBookShelfBlock.SLOT_OCCUPIED_PROPERTIES.iterator(); iterator.hasNext(); iblockdata = (BlockState) iblockdata.setValue(blockstateboolean, false)) {
+            blockstateboolean = (BooleanProperty) iterator.next();
         }
 
-        this.registerDefaultState(blockState);
+        this.registerDefaultState(iblockdata);
     }
 
     @Override
@@ -53,20 +60,25 @@
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        BlockEntity optional = world.getBlockEntity(pos);
-        if (optional instanceof ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity) {
-            Optional<Vec2> optional = getRelativeHitCoordinatesForBlockFace(hit, state.getValue(HorizontalDirectionalBlock.FACING));
+        BlockEntity tileentity = world.getBlockEntity(pos);
+
+        if (tileentity instanceof ChiseledBookShelfBlockEntity) {
+            ChiseledBookShelfBlockEntity chiseledbookshelfblockentity = (ChiseledBookShelfBlockEntity) tileentity;
+            Optional optional = ChiseledBookShelfBlock.getRelativeHitCoordinatesForBlockFace(hit, (Direction) state.getValue(HorizontalDirectionalBlock.FACING));
+
             if (optional.isEmpty()) {
                 return InteractionResult.PASS;
             } else {
-                int i = getHitSlot(optional.get());
-                if (state.getValue(SLOT_OCCUPIED_PROPERTIES.get(i))) {
-                    removeBook(world, pos, player, chiseledBookShelfBlockEntity, i);
+                int i = ChiseledBookShelfBlock.getHitSlot((Vec2) optional.get());
+
+                if ((Boolean) state.getValue((Property) ChiseledBookShelfBlock.SLOT_OCCUPIED_PROPERTIES.get(i))) {
+                    ChiseledBookShelfBlock.removeBook(world, pos, player, chiseledbookshelfblockentity, i);
                     return InteractionResult.sidedSuccess(world.isClientSide);
                 } else {
-                    ItemStack itemStack = player.getItemInHand(hand);
-                    if (itemStack.is(ItemTags.BOOKSHELF_BOOKS)) {
-                        addBook(world, pos, player, chiseledBookShelfBlockEntity, itemStack, i);
+                    ItemStack itemstack = player.getItemInHand(hand);
+
+                    if (itemstack.is(ItemTags.BOOKSHELF_BOOKS)) {
+                        ChiseledBookShelfBlock.addBook(world, pos, player, chiseledbookshelfblockentity, itemstack, i);
                         return InteractionResult.sidedSuccess(world.isClientSide);
                     } else {
                         return InteractionResult.CONSUME;
@@ -79,54 +91,59 @@
     }
 
     private static Optional<Vec2> getRelativeHitCoordinatesForBlockFace(BlockHitResult hit, Direction facing) {
-        Direction direction = hit.getDirection();
-        if (facing != direction) {
+        Direction enumdirection1 = hit.getDirection();
+
+        if (facing != enumdirection1) {
             return Optional.empty();
         } else {
-            BlockPos blockPos = hit.getBlockPos().relative(direction);
-            Vec3 vec3 = hit.getLocation().subtract((double)blockPos.getX(), (double)blockPos.getY(), (double)blockPos.getZ());
-            double d = vec3.x();
-            double e = vec3.y();
-            double f = vec3.z();
-            Optional var10000;
-            switch (direction) {
+            BlockPos blockposition = hit.getBlockPos().relative(enumdirection1);
+            Vec3 vec3d = hit.getLocation().subtract((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+            double d0 = vec3d.x();
+            double d1 = vec3d.y();
+            double d2 = vec3d.z();
+            Optional optional;
+
+            switch (enumdirection1) {
                 case NORTH:
-                    var10000 = Optional.of(new Vec2((float)(1.0D - d), (float)e));
+                    optional = Optional.of(new Vec2((float) (1.0D - d0), (float) d1));
                     break;
                 case SOUTH:
-                    var10000 = Optional.of(new Vec2((float)d, (float)e));
+                    optional = Optional.of(new Vec2((float) d0, (float) d1));
                     break;
                 case WEST:
-                    var10000 = Optional.of(new Vec2((float)f, (float)e));
+                    optional = Optional.of(new Vec2((float) d2, (float) d1));
                     break;
                 case EAST:
-                    var10000 = Optional.of(new Vec2((float)(1.0D - f), (float)e));
+                    optional = Optional.of(new Vec2((float) (1.0D - d2), (float) d1));
                     break;
                 case DOWN:
                 case UP:
-                    var10000 = Optional.empty();
+                    optional = Optional.empty();
                     break;
                 default:
                     throw new IncompatibleClassChangeError();
             }
 
-            return var10000;
+            return optional;
         }
     }
 
-    private static int getHitSlot(Vec2 hitPos) {
+    public static int getHitSlot(Vec2 hitPos) { //CraftBukkit - private -> public
         int i = hitPos.y >= 0.5F ? 0 : 1;
-        int j = getSection(hitPos.x);
+        int j = ChiseledBookShelfBlock.getSection(hitPos.x);
+
         return j + i * 3;
     }
 
     private static int getSection(float x) {
-        float f = 0.0625F;
-        float g = 0.375F;
+        float f1 = 0.0625F;
+        float f2 = 0.375F;
+
         if (x < 0.375F) {
             return 0;
         } else {
-            float h = 0.6875F;
+            float f3 = 0.6875F;
+
             return x < 0.6875F ? 1 : 2;
         }
     }
@@ -134,58 +151,67 @@
     private static void addBook(Level world, BlockPos pos, Player player, ChiseledBookShelfBlockEntity blockEntity, ItemStack stack, int slot) {
         if (!world.isClientSide) {
             player.awardStat(Stats.ITEM_USED.get(stack.getItem()));
-            SoundEvent soundEvent = stack.is(Items.ENCHANTED_BOOK) ? SoundEvents.CHISELED_BOOKSHELF_INSERT_ENCHANTED : SoundEvents.CHISELED_BOOKSHELF_INSERT;
+            SoundEvent soundeffect = stack.is(Items.ENCHANTED_BOOK) ? SoundEvents.CHISELED_BOOKSHELF_INSERT_ENCHANTED : SoundEvents.CHISELED_BOOKSHELF_INSERT;
+
             blockEntity.setItem(slot, stack.split(1));
-            world.playSound((Player)null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.playSound((Player) null, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
             if (player.isCreative()) {
                 stack.grow(1);
             }
 
-            world.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
+            world.gameEvent((Entity) player, GameEvent.BLOCK_CHANGE, pos);
         }
     }
 
     private static void removeBook(Level world, BlockPos pos, Player player, ChiseledBookShelfBlockEntity blockEntity, int slot) {
         if (!world.isClientSide) {
-            ItemStack itemStack = blockEntity.removeItem(slot, 1);
-            SoundEvent soundEvent = itemStack.is(Items.ENCHANTED_BOOK) ? SoundEvents.CHISELED_BOOKSHELF_PICKUP_ENCHANTED : SoundEvents.CHISELED_BOOKSHELF_PICKUP;
-            world.playSound((Player)null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
-            if (!player.getInventory().add(itemStack)) {
-                player.drop(itemStack, false);
+            ItemStack itemstack = blockEntity.removeItem(slot, 1);
+            SoundEvent soundeffect = itemstack.is(Items.ENCHANTED_BOOK) ? SoundEvents.CHISELED_BOOKSHELF_PICKUP_ENCHANTED : SoundEvents.CHISELED_BOOKSHELF_PICKUP;
+
+            world.playSound((Player) null, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
+            if (!player.getInventory().add(itemstack)) {
+                player.drop(itemstack, false);
             }
 
-            world.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
+            world.gameEvent((Entity) player, GameEvent.BLOCK_CHANGE, pos);
         }
     }
 
+    @Nullable
     @Override
-    public @Nullable BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
+    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
         return new ChiseledBookShelfBlockEntity(pos, state);
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
         builder.add(HorizontalDirectionalBlock.FACING);
-        SLOT_OCCUPIED_PROPERTIES.forEach((property) -> {
-            builder.add(property);
+        List list = ChiseledBookShelfBlock.SLOT_OCCUPIED_PROPERTIES;
+
+        Objects.requireNonNull(builder);
+        list.forEach((iblockstate) -> {
+            builder.add((BooleanProperty) iblockstate); // CraftBukkit - Decompile error
         });
     }
 
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            BlockEntity blockEntity = world.getBlockEntity(pos);
-            if (blockEntity instanceof ChiseledBookShelfBlockEntity) {
-                ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity = (ChiseledBookShelfBlockEntity)blockEntity;
-                if (!chiseledBookShelfBlockEntity.isEmpty()) {
-                    for(int i = 0; i < 6; ++i) {
-                        ItemStack itemStack = chiseledBookShelfBlockEntity.getItem(i);
-                        if (!itemStack.isEmpty()) {
-                            Containers.dropItemStack(world, (double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), itemStack);
+            BlockEntity tileentity = world.getBlockEntity(pos);
+
+            if (tileentity instanceof ChiseledBookShelfBlockEntity) {
+                ChiseledBookShelfBlockEntity chiseledbookshelfblockentity = (ChiseledBookShelfBlockEntity) tileentity;
+
+                if (!chiseledbookshelfblockentity.isEmpty()) {
+                    for (int i = 0; i < 6; ++i) {
+                        ItemStack itemstack = chiseledbookshelfblockentity.getItem(i);
+
+                        if (!itemstack.isEmpty()) {
+                            Containers.dropItemStack(world, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), itemstack);
                         }
                     }
 
-                    chiseledBookShelfBlockEntity.clearContent();
+                    chiseledbookshelfblockentity.clearContent();
                     world.updateNeighbourForOutputSignal(pos, this);
                 }
             }
@@ -196,17 +222,17 @@
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return this.defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, ctx.getHorizontalDirection().getOpposite());
+        return (BlockState) this.defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, ctx.getHorizontalDirection().getOpposite());
     }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return state.setValue(HorizontalDirectionalBlock.FACING, rotation.rotate(state.getValue(HorizontalDirectionalBlock.FACING)));
+        return (BlockState) state.setValue(HorizontalDirectionalBlock.FACING, rotation.rotate((Direction) state.getValue(HorizontalDirectionalBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation(state.getValue(HorizontalDirectionalBlock.FACING)));
+        return state.rotate(mirror.getRotation((Direction) state.getValue(HorizontalDirectionalBlock.FACING)));
     }
 
     @Override
@@ -219,10 +245,12 @@
         if (world.isClientSide()) {
             return 0;
         } else {
-            BlockEntity var5 = world.getBlockEntity(pos);
-            if (var5 instanceof ChiseledBookShelfBlockEntity) {
-                ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity = (ChiseledBookShelfBlockEntity)var5;
-                return chiseledBookShelfBlockEntity.getLastInteractedSlot() + 1;
+            BlockEntity tileentity = world.getBlockEntity(pos);
+
+            if (tileentity instanceof ChiseledBookShelfBlockEntity) {
+                ChiseledBookShelfBlockEntity chiseledbookshelfblockentity = (ChiseledBookShelfBlockEntity) tileentity;
+
+                return chiseledbookshelfblockentity.getLastInteractedSlot() + 1;
             } else {
                 return 0;
             }
