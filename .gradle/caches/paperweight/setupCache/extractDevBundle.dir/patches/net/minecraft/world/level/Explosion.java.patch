--- a/net/minecraft/world/level/Explosion.java
+++ b/net/minecraft/world/level/Explosion.java
@@ -4,6 +4,7 @@
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectListIterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -20,6 +21,8 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.boss.EnderDragonPart;
+import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.player.Player;
@@ -38,13 +41,19 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.Location;
+import org.bukkit.event.block.BlockExplodeEvent;
+// CraftBukkit end
 
 public class Explosion {
+
     private static final ExplosionDamageCalculator EXPLOSION_DAMAGE_CALCULATOR = new ExplosionDamageCalculator();
     private static final int MAX_DROPS_PER_COMBINED_STACK = 16;
     private final boolean fire;
     private final Explosion.BlockInteraction blockInteraction;
-    private final RandomSource random = RandomSource.create();
+    private final RandomSource random;
     private final Level level;
     private final double x;
     private final double y;
@@ -54,8 +63,9 @@
     private final float radius;
     private final DamageSource damageSource;
     private final ExplosionDamageCalculator damageCalculator;
-    private final ObjectArrayList<BlockPos> toBlow = new ObjectArrayList<>();
-    private final Map<Player, Vec3> hitPlayers = Maps.newHashMap();
+    private final ObjectArrayList<BlockPos> toBlow;
+    private final Map<Player, Vec3> hitPlayers;
+    public boolean wasCanceled = false; // CraftBukkit - add field
 
     public Explosion(Level world, @Nullable Entity entity, double x, double y, double z, float power, List<BlockPos> affectedBlocks) {
         this(world, entity, x, y, z, power, false, Explosion.BlockInteraction.DESTROY_WITH_DECAY, affectedBlocks);
@@ -67,13 +77,16 @@
     }
 
     public Explosion(Level world, @Nullable Entity entity, double x, double y, double z, float power, boolean createFire, Explosion.BlockInteraction destructionType) {
-        this(world, entity, (DamageSource)null, (ExplosionDamageCalculator)null, x, y, z, power, createFire, destructionType);
+        this(world, entity, (DamageSource) null, (ExplosionDamageCalculator) null, x, y, z, power, createFire, destructionType);
     }
 
     public Explosion(Level world, @Nullable Entity entity, @Nullable DamageSource damageSource, @Nullable ExplosionDamageCalculator behavior, double x, double y, double z, float power, boolean createFire, Explosion.BlockInteraction destructionType) {
+        this.random = RandomSource.create();
+        this.toBlow = new ObjectArrayList();
+        this.hitPlayers = Maps.newHashMap();
         this.level = world;
         this.source = entity;
-        this.radius = power;
+        this.radius = (float) Math.max(power, 0.0); // CraftBukkit - clamp bad values
         this.x = x;
         this.y = y;
         this.z = z;
@@ -84,28 +97,30 @@
     }
 
     private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity entity) {
-        return (ExplosionDamageCalculator)(entity == null ? EXPLOSION_DAMAGE_CALCULATOR : new EntityBasedExplosionDamageCalculator(entity));
+        return (ExplosionDamageCalculator) (entity == null ? Explosion.EXPLOSION_DAMAGE_CALCULATOR : new EntityBasedExplosionDamageCalculator(entity));
     }
 
     public static float getSeenPercent(Vec3 source, Entity entity) {
-        AABB aABB = entity.getBoundingBox();
-        double d = 1.0D / ((aABB.maxX - aABB.minX) * 2.0D + 1.0D);
-        double e = 1.0D / ((aABB.maxY - aABB.minY) * 2.0D + 1.0D);
-        double f = 1.0D / ((aABB.maxZ - aABB.minZ) * 2.0D + 1.0D);
-        double g = (1.0D - Math.floor(1.0D / d) * d) / 2.0D;
-        double h = (1.0D - Math.floor(1.0D / f) * f) / 2.0D;
-        if (!(d < 0.0D) && !(e < 0.0D) && !(f < 0.0D)) {
+        AABB axisalignedbb = entity.getBoundingBox();
+        double d0 = 1.0D / ((axisalignedbb.maxX - axisalignedbb.minX) * 2.0D + 1.0D);
+        double d1 = 1.0D / ((axisalignedbb.maxY - axisalignedbb.minY) * 2.0D + 1.0D);
+        double d2 = 1.0D / ((axisalignedbb.maxZ - axisalignedbb.minZ) * 2.0D + 1.0D);
+        double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
+        double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
+
+        if (d0 >= 0.0D && d1 >= 0.0D && d2 >= 0.0D) {
             int i = 0;
             int j = 0;
 
-            for(double k = 0.0D; k <= 1.0D; k += d) {
-                for(double l = 0.0D; l <= 1.0D; l += e) {
-                    for(double m = 0.0D; m <= 1.0D; m += f) {
-                        double n = Mth.lerp(k, aABB.minX, aABB.maxX);
-                        double o = Mth.lerp(l, aABB.minY, aABB.maxY);
-                        double p = Mth.lerp(m, aABB.minZ, aABB.maxZ);
-                        Vec3 vec3 = new Vec3(n + g, o, p + h);
-                        if (entity.level().clip(new ClipContext(vec3, source, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, entity)).getType() == HitResult.Type.MISS) {
+            for (double d5 = 0.0D; d5 <= 1.0D; d5 += d0) {
+                for (double d6 = 0.0D; d6 <= 1.0D; d6 += d1) {
+                    for (double d7 = 0.0D; d7 <= 1.0D; d7 += d2) {
+                        double d8 = Mth.lerp(d5, axisalignedbb.minX, axisalignedbb.maxX);
+                        double d9 = Mth.lerp(d6, axisalignedbb.minY, axisalignedbb.maxY);
+                        double d10 = Mth.lerp(d7, axisalignedbb.minZ, axisalignedbb.maxZ);
+                        Vec3 vec3d1 = new Vec3(d8 + d3, d9, d10 + d4);
+
+                        if (entity.level().clip(new ClipContext(vec3d1, source, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, entity)).getType() == HitResult.Type.MISS) {
                             ++i;
                         }
 
@@ -114,53 +129,74 @@
                 }
             }
 
-            return (float)i / (float)j;
+            return (float) i / (float) j;
         } else {
             return 0.0F;
         }
     }
 
     public void explode() {
+        // CraftBukkit start
+        if (this.radius < 0.1F) {
+            return;
+        }
+        // CraftBukkit end
         this.level.gameEvent(this.source, GameEvent.EXPLODE, new Vec3(this.x, this.y, this.z));
         Set<BlockPos> set = Sets.newHashSet();
-        int i = 16;
+        boolean flag = true;
 
-        for(int j = 0; j < 16; ++j) {
-            for(int k = 0; k < 16; ++k) {
-                for(int l = 0; l < 16; ++l) {
-                    if (j == 0 || j == 15 || k == 0 || k == 15 || l == 0 || l == 15) {
-                        double d = (double)((float)j / 15.0F * 2.0F - 1.0F);
-                        double e = (double)((float)k / 15.0F * 2.0F - 1.0F);
-                        double f = (double)((float)l / 15.0F * 2.0F - 1.0F);
-                        double g = Math.sqrt(d * d + e * e + f * f);
-                        d /= g;
-                        e /= g;
-                        f /= g;
-                        float h = this.radius * (0.7F + this.level.random.nextFloat() * 0.6F);
-                        double m = this.x;
-                        double n = this.y;
-                        double o = this.z;
+        int i;
+        int j;
 
-                        for(float p = 0.3F; h > 0.0F; h -= 0.22500001F) {
-                            BlockPos blockPos = BlockPos.containing(m, n, o);
-                            BlockState blockState = this.level.getBlockState(blockPos);
-                            FluidState fluidState = this.level.getFluidState(blockPos);
-                            if (!this.level.isInWorldBounds(blockPos)) {
+        for (int k = 0; k < 16; ++k) {
+            for (i = 0; i < 16; ++i) {
+                for (j = 0; j < 16; ++j) {
+                    if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
+                        double d0 = (double) ((float) k / 15.0F * 2.0F - 1.0F);
+                        double d1 = (double) ((float) i / 15.0F * 2.0F - 1.0F);
+                        double d2 = (double) ((float) j / 15.0F * 2.0F - 1.0F);
+                        double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+
+                        d0 /= d3;
+                        d1 /= d3;
+                        d2 /= d3;
+                        float f = this.radius * (0.7F + this.level.random.nextFloat() * 0.6F);
+                        double d4 = this.x;
+                        double d5 = this.y;
+                        double d6 = this.z;
+
+                        for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
+                            BlockPos blockposition = BlockPos.containing(d4, d5, d6);
+                            BlockState iblockdata = this.level.getBlockState(blockposition);
+                            if (!iblockdata.isDestroyable()) continue; // Paper
+                            FluidState fluid = iblockdata.getFluidState(); // Paper
+
+                            if (!this.level.isInWorldBounds(blockposition)) {
                                 break;
                             }
 
-                            Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockPos, blockState, fluidState);
+                            Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockposition, iblockdata, fluid);
+
                             if (optional.isPresent()) {
-                                h -= (optional.get() + 0.3F) * 0.3F;
+                                f -= ((Float) optional.get() + 0.3F) * 0.3F;
                             }
 
-                            if (h > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockPos, blockState, h)) {
-                                set.add(blockPos);
+                            if (f > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockposition, iblockdata, f)) {
+                                set.add(blockposition);
+                                // Paper start - prevent headless pistons from forming
+                                if (!io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowHeadlessPistons && iblockdata.getBlock() == Blocks.MOVING_PISTON) {
+                                    BlockEntity extension = this.level.getBlockEntity(blockposition);
+                                    if (extension instanceof net.minecraft.world.level.block.piston.PistonMovingBlockEntity blockEntity && blockEntity.isSourcePiston()) {
+                                       net.minecraft.core.Direction direction = iblockdata.getValue(net.minecraft.world.level.block.piston.PistonHeadBlock.FACING);
+                                       set.add(blockposition.relative(direction.getOpposite()));
+                                    }
+                                }
+                                // Paper end
                             }
 
-                            m += d * (double)0.3F;
-                            n += e * (double)0.3F;
-                            o += f * (double)0.3F;
+                            d4 += d0 * 0.30000001192092896D;
+                            d5 += d1 * 0.30000001192092896D;
+                            d6 += d2 * 0.30000001192092896D;
                         }
                     }
                 }
@@ -168,49 +204,90 @@
         }
 
         this.toBlow.addAll(set);
-        float q = this.radius * 2.0F;
-        int r = Mth.floor(this.x - (double)q - 1.0D);
-        int s = Mth.floor(this.x + (double)q + 1.0D);
-        int t = Mth.floor(this.y - (double)q - 1.0D);
-        int u = Mth.floor(this.y + (double)q + 1.0D);
-        int v = Mth.floor(this.z - (double)q - 1.0D);
-        int w = Mth.floor(this.z + (double)q + 1.0D);
-        List<Entity> list = this.level.getEntities(this.source, new AABB((double)r, (double)t, (double)v, (double)s, (double)u, (double)w));
-        Vec3 vec3 = new Vec3(this.x, this.y, this.z);
+        float f2 = this.radius * 2.0F;
+
+        i = Mth.floor(this.x - (double) f2 - 1.0D);
+        j = Mth.floor(this.x + (double) f2 + 1.0D);
+        int l = Mth.floor(this.y - (double) f2 - 1.0D);
+        int i1 = Mth.floor(this.y + (double) f2 + 1.0D);
+        int j1 = Mth.floor(this.z - (double) f2 - 1.0D);
+        int k1 = Mth.floor(this.z + (double) f2 + 1.0D);
+        List<Entity> list = this.level.getEntities(this.source, new AABB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), (com.google.common.base.Predicate<Entity>) entity -> entity.isAlive() && !entity.isSpectator()); // Paper - Fix lag from explosions processing dead entities
+        Vec3 vec3d = new Vec3(this.x, this.y, this.z);
+
+        for (int l1 = 0; l1 < list.size(); ++l1) {
+            Entity entity = (Entity) list.get(l1);
 
-        for(int x = 0; x < list.size(); ++x) {
-            Entity entity = list.get(x);
             if (!entity.ignoreExplosion()) {
-                double y = Math.sqrt(entity.distanceToSqr(vec3)) / (double)q;
-                if (y <= 1.0D) {
-                    double z = entity.getX() - this.x;
-                    double aa = (entity instanceof PrimedTnt ? entity.getY() : entity.getEyeY()) - this.y;
-                    double ab = entity.getZ() - this.z;
-                    double ac = Math.sqrt(z * z + aa * aa + ab * ab);
-                    if (ac != 0.0D) {
-                        z /= ac;
-                        aa /= ac;
-                        ab /= ac;
-                        double ad = (double)getSeenPercent(vec3, entity);
-                        double ae = (1.0D - y) * ad;
-                        entity.hurt(this.getDamageSource(), (float)((int)((ae * ae + ae) / 2.0D * 7.0D * (double)q + 1.0D)));
-                        double af;
+                double d7 = Math.sqrt(entity.distanceToSqr(vec3d)) / (double) f2;
+
+                if (d7 <= 1.0D) {
+                    double d8 = entity.getX() - this.x;
+                    double d9 = (entity instanceof PrimedTnt ? entity.getY() : entity.getEyeY()) - this.y;
+                    double d10 = entity.getZ() - this.z;
+                    double d11 = Math.sqrt(d8 * d8 + d9 * d9 + d10 * d10);
+
+                    if (d11 != 0.0D) {
+                        d8 /= d11;
+                        d9 /= d11;
+                        d10 /= d11;
+                        double d12 = this.getBlockDensity(vec3d, entity); // Paper - Optimize explosions
+                        double d13 = (1.0D - d7) * d12;
+
+                        // CraftBukkit start
+
+                        // Special case ender dragon only give knockback if no damage is cancelled
+                        // Thinks to note:
+                        // - Setting a velocity to a ComplexEntityPart is ignored (and therefore not needed)
+                        // - Damaging ComplexEntityPart while forward the damage to EntityEnderDragon
+                        // - Damaging EntityEnderDragon does nothing
+                        // - EntityEnderDragon hitbock always covers the other parts and is therefore always present
+                        if (entity instanceof EnderDragonPart) {
+                            continue;
+                        }
+
+                        CraftEventFactory.entityDamage = this.source;
+                        entity.lastDamageCancelled = false;
+
+                        if (entity instanceof EnderDragon) {
+                            for (EnderDragonPart entityComplexPart : ((EnderDragon) entity).subEntities) {
+                                // Calculate damage separately for each EntityComplexPart
+                                double d7part;
+                                if (list.contains(entityComplexPart) && (d7part = Math.sqrt(entityComplexPart.distanceToSqr(vec3d)) / f2) <= 1.0D) {
+                                    double d13part = (1.0D - d7part) * Explosion.getSeenPercent(vec3d, entityComplexPart);
+                                    entityComplexPart.hurt(this.getDamageSource(), (float) ((int) ((d13part * d13part + d13part) / 2.0D * 7.0D * (double) f2 + 1.0D)));
+                                }
+                            }
+                        } else {
+                            entity.hurt(this.getDamageSource(), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f2 + 1.0D)));
+                        }
+
+                        CraftEventFactory.entityDamage = null;
+                        if (entity.lastDamageCancelled) { // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Skip entity if damage event was cancelled
+                            continue;
+                        }
+                        // CraftBukkit end
+                        double d14;
+
                         if (entity instanceof LivingEntity) {
-                            LivingEntity livingEntity = (LivingEntity)entity;
-                            af = ProtectionEnchantment.getExplosionKnockbackAfterDampener(livingEntity, ae);
+                            LivingEntity entityliving = (LivingEntity) entity;
+
+                            d14 = entity instanceof Player && level.paperConfig().environment.disableExplosionKnockback ? 0 : ProtectionEnchantment.getExplosionKnockbackAfterDampener(entityliving, d13); // Paper - disable explosion knockback
                         } else {
-                            af = ae;
+                            d14 = d13;
                         }
 
-                        z *= af;
-                        aa *= af;
-                        ab *= af;
-                        Vec3 vec32 = new Vec3(z, aa, ab);
-                        entity.setDeltaMovement(entity.getDeltaMovement().add(vec32));
+                        d8 *= d14;
+                        d9 *= d14;
+                        d10 *= d14;
+                        Vec3 vec3d1 = new Vec3(d8, d9, d10);
+
+                        entity.setDeltaMovement(entity.getDeltaMovement().add(vec3d1));
                         if (entity instanceof Player) {
-                            Player player = (Player)entity;
-                            if (!player.isSpectator() && (!player.isCreative() || !player.getAbilities().flying)) {
-                                this.hitPlayers.put(player, vec32);
+                            Player entityhuman = (Player) entity;
+
+                            if (!entityhuman.isSpectator() && (!entityhuman.isCreative() || !entityhuman.getAbilities().flying) && !level.paperConfig().environment.disableExplosionKnockback) { // Paper - Disable explosion knockback
+                                this.hitPlayers.put(entityhuman, vec3d1);
                             }
                         }
                     }
@@ -225,58 +302,133 @@
             this.level.playLocalSound(this.x, this.y, this.z, SoundEvents.GENERIC_EXPLODE, SoundSource.BLOCKS, 4.0F, (1.0F + (this.level.random.nextFloat() - this.level.random.nextFloat()) * 0.2F) * 0.7F, false);
         }
 
-        boolean bl = this.interactsWithBlocks();
+        boolean flag1 = this.interactsWithBlocks();
+
         if (particles) {
-            if (!(this.radius < 2.0F) && bl) {
+            if (this.radius >= 2.0F && flag1) {
                 this.level.addParticle(ParticleTypes.EXPLOSION_EMITTER, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
             } else {
                 this.level.addParticle(ParticleTypes.EXPLOSION, this.x, this.y, this.z, 1.0D, 0.0D, 0.0D);
             }
         }
 
-        if (bl) {
-            ObjectArrayList<Pair<ItemStack, BlockPos>> objectArrayList = new ObjectArrayList<>();
-            boolean bl2 = this.getIndirectSourceEntity() instanceof Player;
+        if (flag1) {
+            ObjectArrayList<Pair<ItemStack, BlockPos>> objectarraylist = new ObjectArrayList();
+            boolean flag2 = this.getIndirectSourceEntity() instanceof Player;
+
             Util.shuffle(this.toBlow, this.level.random);
+            ObjectListIterator objectlistiterator = this.toBlow.iterator();
+            // CraftBukkit start
+            org.bukkit.World bworld = this.level.getWorld();
+            org.bukkit.entity.Entity explode = this.source == null ? null : this.source.getBukkitEntity();
+            Location location = new Location(bworld, this.x, this.y, this.z);
+
+            List<org.bukkit.block.Block> blockList = new ObjectArrayList<>();
+            for (int i1 = this.toBlow.size() - 1; i1 >= 0; i1--) {
+                BlockPos cpos = this.toBlow.get(i1);
+                org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
+                if (!bblock.getType().isAir()) {
+                    blockList.add(bblock);
+                }
+            }
+
+            boolean cancelled;
+            List<org.bukkit.block.Block> bukkitBlocks;
+            float yield;
+
+            if (explode != null) {
+                EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY ? 1.0F / this.radius : 1.0F);
+                this.level.getCraftServer().getPluginManager().callEvent(event);
+                cancelled = event.isCancelled();
+                bukkitBlocks = event.blockList();
+                yield = event.getYield();
+            } else {
+                BlockExplodeEvent event = new BlockExplodeEvent(location.getBlock(), blockList, this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY ? 1.0F / this.radius : 1.0F, this.damageSource.explodedBlockState); // Paper - exploded block state
+                this.level.getCraftServer().getPluginManager().callEvent(event);
+                cancelled = event.isCancelled();
+                bukkitBlocks = event.blockList();
+                yield = event.getYield();
+            }
+
+            this.toBlow.clear();
+
+            for (org.bukkit.block.Block bblock : bukkitBlocks) {
+                BlockPos coords = new BlockPos(bblock.getX(), bblock.getY(), bblock.getZ());
+                this.toBlow.add(coords);
+            }
+
+            if (cancelled) {
+                this.wasCanceled = true;
+                return;
+            }
+            // CraftBukkit end
+            objectlistiterator = this.toBlow.iterator();
+
+            while (objectlistiterator.hasNext()) {
+                BlockPos blockposition = (BlockPos) objectlistiterator.next();
+                BlockState iblockdata = this.level.getBlockState(blockposition);
+                Block block = iblockdata.getBlock();
+                // CraftBukkit start - TNTPrimeEvent
+                if (block instanceof net.minecraft.world.level.block.TntBlock) {
+                    Entity sourceEntity = this.source == null ? null : this.source;
+                    BlockPos sourceBlock = sourceEntity == null ? BlockPos.containing(this.x, this.y, this.z) : null;
+                    if (!CraftEventFactory.callTNTPrimeEvent(this.level, blockposition, org.bukkit.event.block.TNTPrimeEvent.PrimeCause.EXPLOSION, sourceEntity, sourceBlock)) {
+                        this.level.sendBlockUpdated(blockposition, Blocks.AIR.defaultBlockState(), iblockdata, 3); // Update the block on the client
+                        continue;
+                    }
+                }
+                // CraftBukkit end
+
+                if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
+                    BlockPos blockposition1 = blockposition.immutable();
 
-            for(BlockPos blockPos : this.toBlow) {
-                BlockState blockState = this.level.getBlockState(blockPos);
-                Block block = blockState.getBlock();
-                if (!blockState.isAir()) {
-                    BlockPos blockPos2 = blockPos.immutable();
                     this.level.getProfiler().push("explosion_blocks");
                     if (block.dropFromExplosion(this)) {
-                        Level blockEntity = this.level;
-                        if (blockEntity instanceof ServerLevel) {
-                            ServerLevel serverLevel = (ServerLevel)blockEntity;
-                            BlockEntity blockEntity = blockState.hasBlockEntity() ? this.level.getBlockEntity(blockPos) : null;
-                            LootParams.Builder builder = (new LootParams.Builder(serverLevel)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockPos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockEntity).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
-                            if (this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY) {
-                                builder.withParameter(LootContextParams.EXPLOSION_RADIUS, this.radius);
+                        Level world = this.level;
+
+                        if (world instanceof ServerLevel) {
+                            ServerLevel worldserver = (ServerLevel) world;
+                            BlockEntity tileentity = iblockdata.hasBlockEntity() ? this.level.getBlockEntity(blockposition) : null;
+                            LootParams.Builder lootparams_a = (new LootParams.Builder(worldserver)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
+
+                            if (yield < 1.0F) { // CraftBukkit - add yield
+                                lootparams_a.withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / yield); // CraftBukkit - add yield
                             }
 
-                            blockState.spawnAfterBreak(serverLevel, blockPos, ItemStack.EMPTY, bl2);
-                            blockState.getDrops(builder).forEach((stack) -> {
-                                addBlockDrops(objectArrayList, stack, blockPos2);
+                            iblockdata.spawnAfterBreak(worldserver, blockposition, ItemStack.EMPTY, flag2);
+                            iblockdata.getDrops(lootparams_a).forEach((itemstack) -> {
+                                Explosion.addBlockDrops(objectarraylist, itemstack, blockposition1);
                             });
                         }
                     }
 
-                    this.level.setBlock(blockPos, Blocks.AIR.defaultBlockState(), 3);
-                    block.wasExploded(this.level, blockPos, this);
+                    this.level.setBlock(blockposition, Blocks.AIR.defaultBlockState(), 3);
+                    block.wasExploded(this.level, blockposition, this);
                     this.level.getProfiler().pop();
                 }
             }
 
-            for(Pair<ItemStack, BlockPos> pair : objectArrayList) {
-                Block.popResource(this.level, pair.getSecond(), pair.getFirst());
+            objectlistiterator = objectarraylist.iterator();
+
+            while (objectlistiterator.hasNext()) {
+                Pair<ItemStack, BlockPos> pair = (Pair) objectlistiterator.next();
+
+                Block.popResource(this.level, (BlockPos) pair.getSecond(), (ItemStack) pair.getFirst());
             }
         }
 
         if (this.fire) {
-            for(BlockPos blockPos3 : this.toBlow) {
-                if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockPos3).isAir() && this.level.getBlockState(blockPos3.below()).isSolidRender(this.level, blockPos3.below())) {
-                    this.level.setBlockAndUpdate(blockPos3, BaseFireBlock.getState(this.level, blockPos3));
+            ObjectListIterator objectlistiterator1 = this.toBlow.iterator();
+
+            while (objectlistiterator1.hasNext()) {
+                BlockPos blockposition2 = (BlockPos) objectlistiterator1.next();
+
+                if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockposition2).isAir() && this.level.getBlockState(blockposition2.below()).isSolidRender(this.level, blockposition2.below())) {
+                    // CraftBukkit start - Ignition by explosion
+                    if (!org.bukkit.craftbukkit.v1_20_R1.event.CraftEventFactory.callBlockIgniteEvent(this.level, blockposition2.getX(), blockposition2.getY(), blockposition2.getZ(), this).isCancelled()) {
+                        this.level.setBlockAndUpdate(blockposition2, BaseFireBlock.getState(this.level, blockposition2));
+                    }
+                    // CraftBukkit end
                 }
             }
         }
@@ -288,14 +440,17 @@
     }
 
     private static void addBlockDrops(ObjectArrayList<Pair<ItemStack, BlockPos>> stacks, ItemStack stack, BlockPos pos) {
+        if (stack.isEmpty()) return; // CraftBukkit - SPIGOT-5425
         int i = stacks.size();
 
-        for(int j = 0; j < i; ++j) {
-            Pair<ItemStack, BlockPos> pair = stacks.get(j);
-            ItemStack itemStack = pair.getFirst();
-            if (ItemEntity.areMergable(itemStack, stack)) {
-                ItemStack itemStack2 = ItemEntity.merge(itemStack, stack, 16);
-                stacks.set(j, Pair.of(itemStack2, pair.getSecond()));
+        for (int j = 0; j < i; ++j) {
+            Pair<ItemStack, BlockPos> pair = (Pair) stacks.get(j);
+            ItemStack itemstack1 = (ItemStack) pair.getFirst();
+
+            if (ItemEntity.areMergable(itemstack1, stack)) {
+                ItemStack itemstack2 = ItemEntity.merge(itemstack1, stack, 16);
+
+                stacks.set(j, Pair.of(itemstack2, (BlockPos) pair.getSecond()));
                 if (stack.isEmpty()) {
                     return;
                 }
@@ -319,21 +474,27 @@
             return null;
         } else {
             Entity entity = this.source;
+
             if (entity instanceof PrimedTnt) {
-                PrimedTnt primedTnt = (PrimedTnt)entity;
-                return primedTnt.getOwner();
+                PrimedTnt entitytntprimed = (PrimedTnt) entity;
+
+                return entitytntprimed.getOwner();
             } else {
                 entity = this.source;
                 if (entity instanceof LivingEntity) {
-                    LivingEntity livingEntity = (LivingEntity)entity;
-                    return livingEntity;
+                    LivingEntity entityliving = (LivingEntity) entity;
+
+                    return entityliving;
                 } else {
                     entity = this.source;
                     if (entity instanceof Projectile) {
-                        Projectile projectile = (Projectile)entity;
-                        entity = projectile.getOwner();
+                        Projectile iprojectile = (Projectile) entity;
+
+                        entity = iprojectile.getOwner();
                         if (entity instanceof LivingEntity) {
-                            return (LivingEntity)entity;
+                            LivingEntity entityliving1 = (LivingEntity) entity;
+
+                            return entityliving1;
                         }
                     }
 
@@ -357,8 +518,89 @@
     }
 
     public static enum BlockInteraction {
-        KEEP,
-        DESTROY,
-        DESTROY_WITH_DECAY;
+
+        KEEP, DESTROY, DESTROY_WITH_DECAY;
+
+        private BlockInteraction() {}
     }
+    // Paper start - Optimize explosions
+    private float getBlockDensity(Vec3 vec3d, Entity entity) {
+        if (!this.level.paperConfig().environment.optimizeExplosions) {
+            return getSeenPercent(vec3d, entity);
+        }
+        CacheKey key = new CacheKey(this, entity.getBoundingBox());
+        Float blockDensity = this.level.explosionDensityCache.get(key);
+        if (blockDensity == null) {
+            blockDensity = getSeenPercent(vec3d, entity);
+            this.level.explosionDensityCache.put(key, blockDensity);
+        }
+
+        return blockDensity;
+    }
+
+    static class CacheKey {
+        private final Level world;
+        private final double posX, posY, posZ;
+        private final double minX, minY, minZ;
+        private final double maxX, maxY, maxZ;
+
+        public CacheKey(Explosion explosion, AABB aabb) {
+            this.world = explosion.level;
+            this.posX = explosion.x;
+            this.posY = explosion.y;
+            this.posZ = explosion.z;
+            this.minX = aabb.minX;
+            this.minY = aabb.minY;
+            this.minZ = aabb.minZ;
+            this.maxX = aabb.maxX;
+            this.maxY = aabb.maxY;
+            this.maxZ = aabb.maxZ;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+
+            CacheKey cacheKey = (CacheKey) o;
+
+            if (Double.compare(cacheKey.posX, posX) != 0) return false;
+            if (Double.compare(cacheKey.posY, posY) != 0) return false;
+            if (Double.compare(cacheKey.posZ, posZ) != 0) return false;
+            if (Double.compare(cacheKey.minX, minX) != 0) return false;
+            if (Double.compare(cacheKey.minY, minY) != 0) return false;
+            if (Double.compare(cacheKey.minZ, minZ) != 0) return false;
+            if (Double.compare(cacheKey.maxX, maxX) != 0) return false;
+            if (Double.compare(cacheKey.maxY, maxY) != 0) return false;
+            if (Double.compare(cacheKey.maxZ, maxZ) != 0) return false;
+            return world.equals(cacheKey.world);
+        }
+
+        @Override
+        public int hashCode() {
+            int result;
+            long temp;
+            result = world.hashCode();
+            temp = Double.doubleToLongBits(posX);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(posY);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(posZ);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(minX);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(minY);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(minZ);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(maxX);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(maxY);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            temp = Double.doubleToLongBits(maxZ);
+            result = 31 * result + (int) (temp ^ (temp >>> 32));
+            return result;
+        }
+    }
+    // Paper end
 }
